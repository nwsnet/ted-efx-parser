// Generated from Efx.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import EfxListener from './EfxListener.js';
import EfxVisitor from './EfxVisitor.js';

const serializedATN = [4,1,138,1180,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,1,0,1,0,1,0,1,0,3,0,
201,8,0,1,0,1,0,1,0,1,0,1,1,5,1,208,8,1,10,1,12,1,211,9,1,1,1,1,1,1,2,3,
2,216,8,2,1,2,3,2,219,8,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,3,4,229,8,4,1,
4,1,4,3,4,233,8,4,1,4,1,4,3,4,237,8,4,3,4,239,8,4,1,5,1,5,4,5,243,8,5,11,
5,12,5,244,1,5,5,5,248,8,5,10,5,12,5,251,9,5,3,5,253,8,5,1,6,4,6,256,8,6,
11,6,12,6,257,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,287,8,7,1,8,1,8,3,
8,291,8,8,1,9,1,9,3,9,295,8,9,1,10,1,10,1,10,1,10,3,10,301,8,10,1,11,1,11,
1,12,1,12,1,12,1,12,1,12,3,12,310,8,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
1,13,3,13,320,8,13,1,14,1,14,1,14,5,14,325,8,14,10,14,12,14,328,9,14,1,15,
1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,342,8,15,1,16,
1,16,1,16,1,16,1,16,1,16,1,16,3,16,351,8,16,1,16,1,16,1,17,1,17,1,17,1,17,
1,17,1,17,1,17,1,17,3,17,363,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
1,18,1,18,3,18,375,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,384,8,19,
1,19,1,19,1,19,1,19,1,19,3,19,391,8,19,1,19,1,19,1,19,1,19,1,19,3,19,398,
8,19,1,19,1,19,1,19,1,19,1,19,3,19,405,8,19,1,19,1,19,1,19,1,19,1,19,3,19,
412,8,19,1,19,1,19,1,19,1,19,1,19,3,19,419,8,19,1,19,1,19,1,19,1,19,1,19,
1,19,3,19,427,8,19,1,19,1,19,1,19,1,19,1,19,3,19,434,8,19,1,19,1,19,1,19,
1,19,1,19,3,19,441,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,1,19,3,19,488,8,19,1,19,1,19,1,19,1,19,1,19,1,19,
1,19,1,19,1,19,1,19,1,19,3,19,501,8,19,1,19,1,19,5,19,505,8,19,10,19,12,
19,508,9,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
3,20,522,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
1,21,1,21,1,21,1,21,1,21,3,21,541,8,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,
549,8,21,10,21,12,21,552,9,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,
22,1,22,1,22,1,22,3,22,566,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
1,23,1,23,1,23,1,23,3,23,580,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
24,1,24,1,24,3,24,607,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
5,24,618,8,24,10,24,12,24,621,9,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
25,3,25,631,8,25,1,26,1,26,1,26,1,26,5,26,637,8,26,10,26,12,26,640,9,26,
1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,651,8,26,1,26,3,26,654,
8,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,5,28,665,8,28,10,28,12,
28,668,9,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,678,8,28,1,28,3,
28,681,8,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,5,30,692,8,30,10,
30,12,30,695,9,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,705,8,30,
1,30,3,30,708,8,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,719,
8,32,10,32,12,32,722,9,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,732,
8,32,1,32,3,32,735,8,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,5,34,
746,8,34,10,34,12,34,749,9,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,
34,759,8,34,1,34,3,34,762,8,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,
36,5,36,773,8,36,10,36,12,36,776,9,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
1,36,3,36,786,8,36,1,36,3,36,789,8,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,
1,39,1,39,1,39,5,39,801,8,39,10,39,12,39,804,9,39,1,40,1,40,1,40,1,40,1,
40,1,40,1,40,3,40,813,8,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,
1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,
46,1,47,1,47,1,47,1,47,3,47,843,8,47,1,48,1,48,1,49,1,49,1,50,1,50,3,50,
851,8,50,1,51,1,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,
1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,1,61,1,
61,1,62,1,62,1,62,1,63,1,63,1,64,1,64,3,64,888,8,64,1,65,1,65,3,65,892,8,
65,1,66,1,66,3,66,896,8,66,1,67,1,67,1,67,1,68,1,68,1,68,1,69,1,69,1,69,
1,70,1,70,1,70,1,70,1,71,1,71,1,71,3,71,914,8,71,1,72,1,72,1,72,3,72,919,
8,72,1,72,1,72,1,73,3,73,924,8,73,1,73,1,73,1,74,3,74,929,8,74,1,74,1,74,
1,75,3,75,934,8,75,1,75,1,75,1,76,1,76,3,76,940,8,76,1,77,1,77,1,77,1,78,
1,78,1,78,1,78,1,78,3,78,950,8,78,1,79,3,79,953,8,79,1,79,1,79,1,80,1,80,
1,81,1,81,3,81,961,8,81,1,82,1,82,1,82,1,82,1,83,1,83,3,83,969,8,83,1,84,
1,84,1,84,1,85,1,85,1,85,1,85,1,85,3,85,979,8,85,1,86,1,86,1,87,1,87,1,87,
1,87,1,87,1,88,1,88,1,88,1,88,1,89,1,89,1,90,1,90,1,90,1,91,1,91,1,91,1,
91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,
1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,
91,3,91,1030,8,91,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,
1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,1,92,3,92,1052,8,92,1,93,1,93,1,
93,1,93,1,93,1,93,1,93,3,93,1061,8,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,
1,93,1,93,1,93,1,93,1,93,5,93,1075,8,93,10,93,12,93,1078,9,93,1,93,1,93,
1,93,1,93,1,93,1,93,1,93,3,93,1087,8,93,1,93,1,93,3,93,1091,8,93,1,94,1,
94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,
1,94,1,94,1,94,3,94,1112,8,94,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,
96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1129,8,96,1,97,1,97,1,97,1,97,3,97,
1135,8,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1143,8,97,1,97,1,97,1,97,3,
97,1148,8,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1156,8,97,1,97,1,97,1,97,
3,97,1161,8,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1169,8,97,1,97,1,97,1,
97,3,97,1174,8,97,1,97,1,97,3,97,1178,8,97,1,97,0,3,38,42,48,98,0,2,4,6,
8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
178,180,182,184,186,188,190,192,194,0,11,1,0,115,116,1,0,3,5,3,0,19,19,34,
34,42,42,1,0,57,58,1,0,130,132,1,0,133,134,1,0,124,125,1,0,122,123,2,0,65,
65,67,67,2,0,66,66,68,68,1,0,118,119,1279,0,196,1,0,0,0,2,209,1,0,0,0,4,
215,1,0,0,0,6,224,1,0,0,0,8,238,1,0,0,0,10,252,1,0,0,0,12,255,1,0,0,0,14,
286,1,0,0,0,16,290,1,0,0,0,18,294,1,0,0,0,20,300,1,0,0,0,22,302,1,0,0,0,
24,309,1,0,0,0,26,319,1,0,0,0,28,321,1,0,0,0,30,341,1,0,0,0,32,343,1,0,0,
0,34,362,1,0,0,0,36,374,1,0,0,0,38,487,1,0,0,0,40,521,1,0,0,0,42,540,1,0,
0,0,44,565,1,0,0,0,46,579,1,0,0,0,48,606,1,0,0,0,50,630,1,0,0,0,52,653,1,
0,0,0,54,655,1,0,0,0,56,680,1,0,0,0,58,682,1,0,0,0,60,707,1,0,0,0,62,709,
1,0,0,0,64,734,1,0,0,0,66,736,1,0,0,0,68,761,1,0,0,0,70,763,1,0,0,0,72,788,
1,0,0,0,74,790,1,0,0,0,76,795,1,0,0,0,78,797,1,0,0,0,80,812,1,0,0,0,82,814,
1,0,0,0,84,818,1,0,0,0,86,822,1,0,0,0,88,826,1,0,0,0,90,830,1,0,0,0,92,834,
1,0,0,0,94,838,1,0,0,0,96,844,1,0,0,0,98,846,1,0,0,0,100,850,1,0,0,0,102,
852,1,0,0,0,104,854,1,0,0,0,106,856,1,0,0,0,108,858,1,0,0,0,110,860,1,0,
0,0,112,862,1,0,0,0,114,865,1,0,0,0,116,868,1,0,0,0,118,871,1,0,0,0,120,
874,1,0,0,0,122,877,1,0,0,0,124,880,1,0,0,0,126,883,1,0,0,0,128,887,1,0,
0,0,130,891,1,0,0,0,132,895,1,0,0,0,134,897,1,0,0,0,136,900,1,0,0,0,138,
903,1,0,0,0,140,906,1,0,0,0,142,913,1,0,0,0,144,918,1,0,0,0,146,923,1,0,
0,0,148,928,1,0,0,0,150,933,1,0,0,0,152,939,1,0,0,0,154,941,1,0,0,0,156,
944,1,0,0,0,158,952,1,0,0,0,160,956,1,0,0,0,162,960,1,0,0,0,164,962,1,0,
0,0,166,968,1,0,0,0,168,970,1,0,0,0,170,973,1,0,0,0,172,980,1,0,0,0,174,
982,1,0,0,0,176,987,1,0,0,0,178,991,1,0,0,0,180,993,1,0,0,0,182,1029,1,0,
0,0,184,1051,1,0,0,0,186,1090,1,0,0,0,188,1111,1,0,0,0,190,1113,1,0,0,0,
192,1128,1,0,0,0,194,1177,1,0,0,0,196,197,5,13,0,0,197,200,7,0,0,0,198,199,
5,135,0,0,199,201,3,28,14,0,200,198,1,0,0,0,200,201,1,0,0,0,201,202,1,0,
0,0,202,203,5,48,0,0,203,204,3,24,12,0,204,205,5,0,0,1,205,1,1,0,0,0,206,
208,3,4,2,0,207,206,1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,
0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,213,5,0,0,1,213,3,1,0,0,0,214,216,
7,1,0,0,215,214,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,217,219,5,6,0,0,
218,217,1,0,0,0,218,219,1,0,0,0,219,220,1,0,0,0,220,221,3,26,13,0,221,222,
3,6,3,0,222,223,5,8,0,0,223,5,1,0,0,0,224,225,3,8,4,0,225,7,1,0,0,0,226,
228,3,10,5,0,227,229,3,8,4,0,228,227,1,0,0,0,228,229,1,0,0,0,229,239,1,0,
0,0,230,232,3,14,7,0,231,233,3,8,4,0,232,231,1,0,0,0,232,233,1,0,0,0,233,
239,1,0,0,0,234,236,3,24,12,0,235,237,3,8,4,0,236,235,1,0,0,0,236,237,1,
0,0,0,237,239,1,0,0,0,238,226,1,0,0,0,238,230,1,0,0,0,238,234,1,0,0,0,239,
9,1,0,0,0,240,253,3,12,6,0,241,243,5,9,0,0,242,241,1,0,0,0,243,244,1,0,0,
0,244,242,1,0,0,0,244,245,1,0,0,0,245,249,1,0,0,0,246,248,3,10,5,0,247,246,
1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,253,1,0,0,0,
251,249,1,0,0,0,252,240,1,0,0,0,252,242,1,0,0,0,253,11,1,0,0,0,254,256,5,
16,0,0,255,254,1,0,0,0,256,257,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,
13,1,0,0,0,259,260,5,14,0,0,260,261,3,16,8,0,261,262,5,17,0,0,262,263,3,
18,9,0,263,264,5,17,0,0,264,265,3,20,10,0,265,266,5,18,0,0,266,287,1,0,0,
0,267,268,5,14,0,0,268,269,3,18,9,0,269,270,5,17,0,0,270,271,5,114,0,0,271,
272,5,18,0,0,272,287,1,0,0,0,273,274,5,14,0,0,274,275,3,18,9,0,275,276,5,
17,0,0,276,277,5,115,0,0,277,278,5,18,0,0,278,287,1,0,0,0,279,280,5,14,0,
0,280,281,5,115,0,0,281,287,5,18,0,0,282,283,5,14,0,0,283,284,5,34,0,0,284,
287,5,18,0,0,285,287,5,11,0,0,286,259,1,0,0,0,286,267,1,0,0,0,286,273,1,
0,0,0,286,279,1,0,0,0,286,282,1,0,0,0,286,285,1,0,0,0,287,15,1,0,0,0,288,
291,5,19,0,0,289,291,3,24,12,0,290,288,1,0,0,0,290,289,1,0,0,0,291,17,1,
0,0,0,292,295,5,34,0,0,293,295,3,24,12,0,294,292,1,0,0,0,294,293,1,0,0,0,
295,19,1,0,0,0,296,301,5,114,0,0,297,301,5,115,0,0,298,301,3,22,11,0,299,
301,3,24,12,0,300,296,1,0,0,0,300,297,1,0,0,0,300,298,1,0,0,0,300,299,1,
0,0,0,301,21,1,0,0,0,302,303,7,2,0,0,303,23,1,0,0,0,304,305,5,13,0,0,305,
306,3,34,17,0,306,307,5,48,0,0,307,310,1,0,0,0,308,310,5,10,0,0,309,304,
1,0,0,0,309,308,1,0,0,0,310,25,1,0,0,0,311,312,5,13,0,0,312,313,3,152,76,
0,313,314,5,48,0,0,314,320,1,0,0,0,315,316,5,13,0,0,316,317,3,166,83,0,317,
318,5,48,0,0,318,320,1,0,0,0,319,311,1,0,0,0,319,315,1,0,0,0,320,27,1,0,
0,0,321,326,3,30,15,0,322,323,5,135,0,0,323,325,3,30,15,0,324,322,1,0,0,
0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,29,1,0,0,0,328,326,
1,0,0,0,329,330,5,73,0,0,330,342,5,117,0,0,331,332,5,72,0,0,332,342,5,117,
0,0,333,334,5,71,0,0,334,342,5,117,0,0,335,336,5,75,0,0,336,342,5,117,0,
0,337,338,5,76,0,0,338,342,5,117,0,0,339,340,5,77,0,0,340,342,5,117,0,0,
341,329,1,0,0,0,341,331,1,0,0,0,341,333,1,0,0,0,341,335,1,0,0,0,341,337,
1,0,0,0,341,339,1,0,0,0,342,31,1,0,0,0,343,350,5,13,0,0,344,351,3,96,48,
0,345,351,3,98,49,0,346,351,3,106,53,0,347,351,3,108,54,0,348,351,3,110,
55,0,349,351,3,100,50,0,350,344,1,0,0,0,350,345,1,0,0,0,350,346,1,0,0,0,
350,347,1,0,0,0,350,348,1,0,0,0,350,349,1,0,0,0,351,352,1,0,0,0,352,353,
5,48,0,0,353,33,1,0,0,0,354,363,3,36,18,0,355,363,3,42,21,0,356,363,3,40,
20,0,357,363,3,38,19,0,358,363,3,44,22,0,359,363,3,46,23,0,360,363,3,48,
24,0,361,363,3,50,25,0,362,354,1,0,0,0,362,355,1,0,0,0,362,356,1,0,0,0,362,
357,1,0,0,0,362,358,1,0,0,0,362,359,1,0,0,0,362,360,1,0,0,0,362,361,1,0,
0,0,363,35,1,0,0,0,364,365,5,60,0,0,365,366,3,38,19,0,366,367,5,61,0,0,367,
368,3,36,18,0,368,369,5,62,0,0,369,370,3,36,18,0,370,375,1,0,0,0,371,375,
3,128,64,0,372,375,3,130,65,0,373,375,3,126,63,0,374,364,1,0,0,0,374,371,
1,0,0,0,374,372,1,0,0,0,374,373,1,0,0,0,375,37,1,0,0,0,376,377,6,19,-1,0,
377,378,5,43,0,0,378,379,3,38,19,0,379,380,5,44,0,0,380,488,1,0,0,0,381,
383,3,40,20,0,382,384,5,91,0,0,383,382,1,0,0,0,383,384,1,0,0,0,384,385,1,
0,0,0,385,386,5,52,0,0,386,387,3,52,26,0,387,488,1,0,0,0,388,390,3,42,21,
0,389,391,5,91,0,0,390,389,1,0,0,0,390,391,1,0,0,0,391,392,1,0,0,0,392,393,
5,52,0,0,393,394,3,60,30,0,394,488,1,0,0,0,395,397,3,44,22,0,396,398,5,91,
0,0,397,396,1,0,0,0,397,398,1,0,0,0,398,399,1,0,0,0,399,400,5,52,0,0,400,
401,3,64,32,0,401,488,1,0,0,0,402,404,3,46,23,0,403,405,5,91,0,0,404,403,
1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,407,5,52,0,0,407,408,3,68,34,
0,408,488,1,0,0,0,409,411,3,48,24,0,410,412,5,91,0,0,411,410,1,0,0,0,411,
412,1,0,0,0,412,413,1,0,0,0,413,414,5,52,0,0,414,415,3,72,36,0,415,488,1,
0,0,0,416,418,3,40,20,0,417,419,5,91,0,0,418,417,1,0,0,0,418,419,1,0,0,0,
419,420,1,0,0,0,420,421,5,53,0,0,421,422,5,124,0,0,422,488,1,0,0,0,423,424,
3,40,20,0,424,426,5,51,0,0,425,427,5,91,0,0,426,425,1,0,0,0,426,427,1,0,
0,0,427,428,1,0,0,0,428,429,5,55,0,0,429,488,1,0,0,0,430,431,3,132,66,0,
431,433,5,51,0,0,432,434,5,91,0,0,433,432,1,0,0,0,433,434,1,0,0,0,434,435,
1,0,0,0,435,436,5,54,0,0,436,488,1,0,0,0,437,438,3,132,66,0,438,440,5,51,
0,0,439,441,5,91,0,0,440,439,1,0,0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,
443,5,56,0,0,443,444,5,52,0,0,444,445,3,154,77,0,445,488,1,0,0,0,446,447,
3,36,18,0,447,448,5,129,0,0,448,449,3,36,18,0,449,488,1,0,0,0,450,451,3,
42,21,0,451,452,5,129,0,0,452,453,3,42,21,0,453,488,1,0,0,0,454,455,3,40,
20,0,455,456,5,129,0,0,456,457,3,40,20,0,457,488,1,0,0,0,458,459,3,44,22,
0,459,460,5,129,0,0,460,461,3,44,22,0,461,488,1,0,0,0,462,463,3,46,23,0,
463,464,5,129,0,0,464,465,3,46,23,0,465,488,1,0,0,0,466,467,3,48,24,0,467,
468,5,129,0,0,468,469,3,48,24,0,469,488,1,0,0,0,470,471,5,60,0,0,471,472,
3,38,19,0,472,473,5,61,0,0,473,474,3,38,19,0,474,475,5,62,0,0,475,476,3,
38,19,6,476,488,1,0,0,0,477,478,7,3,0,0,478,479,3,78,39,0,479,480,5,59,0,
0,480,481,3,38,19,5,481,488,1,0,0,0,482,488,3,100,50,0,483,488,3,182,91,
0,484,485,5,71,0,0,485,488,3,36,18,0,486,488,3,36,18,0,487,376,1,0,0,0,487,
381,1,0,0,0,487,388,1,0,0,0,487,395,1,0,0,0,487,402,1,0,0,0,487,409,1,0,
0,0,487,416,1,0,0,0,487,423,1,0,0,0,487,430,1,0,0,0,487,437,1,0,0,0,487,
446,1,0,0,0,487,450,1,0,0,0,487,454,1,0,0,0,487,458,1,0,0,0,487,462,1,0,
0,0,487,466,1,0,0,0,487,470,1,0,0,0,487,477,1,0,0,0,487,482,1,0,0,0,487,
483,1,0,0,0,487,484,1,0,0,0,487,486,1,0,0,0,488,506,1,0,0,0,489,490,10,25,
0,0,490,491,5,50,0,0,491,505,3,38,19,26,492,493,10,24,0,0,493,494,5,49,0,
0,494,505,3,38,19,25,495,496,10,12,0,0,496,497,5,129,0,0,497,505,3,38,19,
13,498,500,10,22,0,0,499,501,5,91,0,0,500,499,1,0,0,0,500,501,1,0,0,0,501,
502,1,0,0,0,502,503,5,52,0,0,503,505,3,56,28,0,504,489,1,0,0,0,504,492,1,
0,0,0,504,495,1,0,0,0,504,498,1,0,0,0,505,508,1,0,0,0,506,504,1,0,0,0,506,
507,1,0,0,0,507,39,1,0,0,0,508,506,1,0,0,0,509,510,5,60,0,0,510,511,3,38,
19,0,511,512,5,61,0,0,512,513,3,40,20,0,513,514,5,62,0,0,514,515,3,40,20,
0,515,522,1,0,0,0,516,522,3,96,48,0,517,522,3,186,93,0,518,519,5,73,0,0,
519,522,3,36,18,0,520,522,3,36,18,0,521,509,1,0,0,0,521,516,1,0,0,0,521,
517,1,0,0,0,521,518,1,0,0,0,521,520,1,0,0,0,522,41,1,0,0,0,523,524,6,21,
-1,0,524,525,5,43,0,0,525,526,3,42,21,0,526,527,5,44,0,0,527,541,1,0,0,0,
528,529,5,60,0,0,529,530,3,38,19,0,530,531,5,61,0,0,531,532,3,42,21,0,532,
533,5,62,0,0,533,534,3,42,21,5,534,541,1,0,0,0,535,541,3,98,49,0,536,541,
3,184,92,0,537,538,5,72,0,0,538,541,3,36,18,0,539,541,3,36,18,0,540,523,
1,0,0,0,540,528,1,0,0,0,540,535,1,0,0,0,540,536,1,0,0,0,540,537,1,0,0,0,
540,539,1,0,0,0,541,550,1,0,0,0,542,543,10,7,0,0,543,544,7,4,0,0,544,549,
3,42,21,8,545,546,10,6,0,0,546,547,7,5,0,0,547,549,3,42,21,7,548,542,1,0,
0,0,548,545,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,
43,1,0,0,0,552,550,1,0,0,0,553,554,5,60,0,0,554,555,3,38,19,0,555,556,5,
61,0,0,556,557,3,44,22,0,557,558,5,62,0,0,558,559,3,44,22,0,559,566,1,0,
0,0,560,566,3,106,53,0,561,566,3,188,94,0,562,563,5,75,0,0,563,566,3,36,
18,0,564,566,3,36,18,0,565,553,1,0,0,0,565,560,1,0,0,0,565,561,1,0,0,0,565,
562,1,0,0,0,565,564,1,0,0,0,566,45,1,0,0,0,567,568,5,60,0,0,568,569,3,38,
19,0,569,570,5,61,0,0,570,571,3,46,23,0,571,572,5,62,0,0,572,573,3,46,23,
0,573,580,1,0,0,0,574,580,3,108,54,0,575,580,3,190,95,0,576,577,5,76,0,0,
577,580,3,36,18,0,578,580,3,36,18,0,579,567,1,0,0,0,579,574,1,0,0,0,579,
575,1,0,0,0,579,576,1,0,0,0,579,578,1,0,0,0,580,47,1,0,0,0,581,582,6,24,
-1,0,582,583,5,43,0,0,583,584,3,48,24,0,584,585,5,44,0,0,585,607,1,0,0,0,
586,587,3,44,22,0,587,588,5,134,0,0,588,589,3,44,22,0,589,607,1,0,0,0,590,
591,3,42,21,0,591,592,5,130,0,0,592,593,3,48,24,9,593,607,1,0,0,0,594,595,
5,60,0,0,595,596,3,38,19,0,596,597,5,61,0,0,597,598,3,48,24,0,598,599,5,
62,0,0,599,600,3,48,24,5,600,607,1,0,0,0,601,607,3,110,55,0,602,607,3,192,
96,0,603,604,5,77,0,0,604,607,3,36,18,0,605,607,3,36,18,0,606,581,1,0,0,
0,606,586,1,0,0,0,606,590,1,0,0,0,606,594,1,0,0,0,606,601,1,0,0,0,606,602,
1,0,0,0,606,603,1,0,0,0,606,605,1,0,0,0,607,619,1,0,0,0,608,609,10,7,0,0,
609,610,5,133,0,0,610,618,3,48,24,8,611,612,10,6,0,0,612,613,5,134,0,0,613,
618,3,48,24,7,614,615,10,8,0,0,615,616,5,130,0,0,616,618,3,42,21,0,617,608,
1,0,0,0,617,611,1,0,0,0,617,614,1,0,0,0,618,621,1,0,0,0,619,617,1,0,0,0,
619,620,1,0,0,0,620,49,1,0,0,0,621,619,1,0,0,0,622,631,3,130,65,0,623,631,
3,52,26,0,624,631,3,56,28,0,625,631,3,60,30,0,626,631,3,64,32,0,627,631,
3,68,34,0,628,631,3,72,36,0,629,631,3,194,97,0,630,622,1,0,0,0,630,623,1,
0,0,0,630,624,1,0,0,0,630,625,1,0,0,0,630,626,1,0,0,0,630,627,1,0,0,0,630,
628,1,0,0,0,630,629,1,0,0,0,631,51,1,0,0,0,632,633,5,43,0,0,633,638,3,40,
20,0,634,635,5,135,0,0,635,637,3,40,20,0,636,634,1,0,0,0,637,640,1,0,0,0,
638,636,1,0,0,0,638,639,1,0,0,0,639,641,1,0,0,0,640,638,1,0,0,0,641,642,
5,44,0,0,642,654,1,0,0,0,643,654,3,54,27,0,644,645,5,43,0,0,645,646,3,54,
27,0,646,647,5,44,0,0,647,654,1,0,0,0,648,654,3,176,88,0,649,651,5,73,0,
0,650,649,1,0,0,0,650,651,1,0,0,0,651,652,1,0,0,0,652,654,3,130,65,0,653,
632,1,0,0,0,653,643,1,0,0,0,653,644,1,0,0,0,653,648,1,0,0,0,653,650,1,0,
0,0,654,53,1,0,0,0,655,656,5,63,0,0,656,657,3,78,39,0,657,658,5,64,0,0,658,
659,3,40,20,0,659,55,1,0,0,0,660,661,5,43,0,0,661,666,3,38,19,0,662,663,
5,135,0,0,663,665,3,38,19,0,664,662,1,0,0,0,665,668,1,0,0,0,666,664,1,0,
0,0,666,667,1,0,0,0,667,669,1,0,0,0,668,666,1,0,0,0,669,670,5,44,0,0,670,
681,1,0,0,0,671,681,3,58,29,0,672,673,5,43,0,0,673,674,3,58,29,0,674,675,
5,44,0,0,675,681,1,0,0,0,676,678,5,71,0,0,677,676,1,0,0,0,677,678,1,0,0,
0,678,679,1,0,0,0,679,681,3,130,65,0,680,660,1,0,0,0,680,671,1,0,0,0,680,
672,1,0,0,0,680,677,1,0,0,0,681,57,1,0,0,0,682,683,5,63,0,0,683,684,3,78,
39,0,684,685,5,64,0,0,685,686,3,38,19,0,686,59,1,0,0,0,687,688,5,43,0,0,
688,693,3,42,21,0,689,690,5,135,0,0,690,692,3,42,21,0,691,689,1,0,0,0,692,
695,1,0,0,0,693,691,1,0,0,0,693,694,1,0,0,0,694,696,1,0,0,0,695,693,1,0,
0,0,696,697,5,44,0,0,697,708,1,0,0,0,698,708,3,62,31,0,699,700,5,43,0,0,
700,701,3,62,31,0,701,702,5,44,0,0,702,708,1,0,0,0,703,705,5,72,0,0,704,
703,1,0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,708,3,130,65,0,707,687,1,
0,0,0,707,698,1,0,0,0,707,699,1,0,0,0,707,704,1,0,0,0,708,61,1,0,0,0,709,
710,5,63,0,0,710,711,3,78,39,0,711,712,5,64,0,0,712,713,3,42,21,0,713,63,
1,0,0,0,714,715,5,43,0,0,715,720,3,44,22,0,716,717,5,135,0,0,717,719,3,44,
22,0,718,716,1,0,0,0,719,722,1,0,0,0,720,718,1,0,0,0,720,721,1,0,0,0,721,
723,1,0,0,0,722,720,1,0,0,0,723,724,5,44,0,0,724,735,1,0,0,0,725,735,3,66,
33,0,726,727,5,43,0,0,727,728,3,66,33,0,728,729,5,44,0,0,729,735,1,0,0,0,
730,732,5,75,0,0,731,730,1,0,0,0,731,732,1,0,0,0,732,733,1,0,0,0,733,735,
3,130,65,0,734,714,1,0,0,0,734,725,1,0,0,0,734,726,1,0,0,0,734,731,1,0,0,
0,735,65,1,0,0,0,736,737,5,63,0,0,737,738,3,78,39,0,738,739,5,64,0,0,739,
740,3,44,22,0,740,67,1,0,0,0,741,742,5,43,0,0,742,747,3,46,23,0,743,744,
5,135,0,0,744,746,3,46,23,0,745,743,1,0,0,0,746,749,1,0,0,0,747,745,1,0,
0,0,747,748,1,0,0,0,748,750,1,0,0,0,749,747,1,0,0,0,750,751,5,44,0,0,751,
762,1,0,0,0,752,762,3,70,35,0,753,754,5,43,0,0,754,755,3,70,35,0,755,756,
5,44,0,0,756,762,1,0,0,0,757,759,5,76,0,0,758,757,1,0,0,0,758,759,1,0,0,
0,759,760,1,0,0,0,760,762,3,130,65,0,761,741,1,0,0,0,761,752,1,0,0,0,761,
753,1,0,0,0,761,758,1,0,0,0,762,69,1,0,0,0,763,764,5,63,0,0,764,765,3,78,
39,0,765,766,5,64,0,0,766,767,3,46,23,0,767,71,1,0,0,0,768,769,5,43,0,0,
769,774,3,48,24,0,770,771,5,135,0,0,771,773,3,48,24,0,772,770,1,0,0,0,773,
776,1,0,0,0,774,772,1,0,0,0,774,775,1,0,0,0,775,777,1,0,0,0,776,774,1,0,
0,0,777,778,5,44,0,0,778,789,1,0,0,0,779,789,3,74,37,0,780,781,5,43,0,0,
781,782,3,74,37,0,782,783,5,44,0,0,783,789,1,0,0,0,784,786,5,77,0,0,785,
784,1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,789,3,130,65,0,788,768,1,
0,0,0,788,779,1,0,0,0,788,780,1,0,0,0,788,785,1,0,0,0,789,73,1,0,0,0,790,
791,5,63,0,0,791,792,3,78,39,0,792,793,5,64,0,0,793,794,3,48,24,0,794,75,
1,0,0,0,795,796,3,38,19,0,796,77,1,0,0,0,797,802,3,80,40,0,798,799,5,135,
0,0,799,801,3,80,40,0,800,798,1,0,0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,
803,1,0,0,0,803,79,1,0,0,0,804,802,1,0,0,0,805,813,3,82,41,0,806,813,3,84,
42,0,807,813,3,86,43,0,808,813,3,88,44,0,809,813,3,90,45,0,810,813,3,92,
46,0,811,813,3,94,47,0,812,805,1,0,0,0,812,806,1,0,0,0,812,807,1,0,0,0,812,
808,1,0,0,0,812,809,1,0,0,0,812,810,1,0,0,0,812,811,1,0,0,0,813,81,1,0,0,
0,814,815,3,112,56,0,815,816,5,52,0,0,816,817,3,52,26,0,817,83,1,0,0,0,818,
819,3,114,57,0,819,820,5,52,0,0,820,821,3,56,28,0,821,85,1,0,0,0,822,823,
3,116,58,0,823,824,5,52,0,0,824,825,3,60,30,0,825,87,1,0,0,0,826,827,3,118,
59,0,827,828,5,52,0,0,828,829,3,64,32,0,829,89,1,0,0,0,830,831,3,120,60,
0,831,832,5,52,0,0,832,833,3,68,34,0,833,91,1,0,0,0,834,835,3,122,61,0,835,
836,5,52,0,0,836,837,3,72,36,0,837,93,1,0,0,0,838,839,3,124,62,0,839,842,
5,52,0,0,840,843,3,152,76,0,841,843,3,166,83,0,842,840,1,0,0,0,842,841,1,
0,0,0,843,95,1,0,0,0,844,845,7,6,0,0,845,97,1,0,0,0,846,847,7,7,0,0,847,
99,1,0,0,0,848,851,3,102,51,0,849,851,3,104,52,0,850,848,1,0,0,0,850,849,
1,0,0,0,851,101,1,0,0,0,852,853,7,8,0,0,853,103,1,0,0,0,854,855,7,9,0,0,
855,105,1,0,0,0,856,857,5,126,0,0,857,107,1,0,0,0,858,859,5,127,0,0,859,
109,1,0,0,0,860,861,7,10,0,0,861,111,1,0,0,0,862,863,5,73,0,0,863,864,5,
117,0,0,864,113,1,0,0,0,865,866,5,71,0,0,866,867,5,117,0,0,867,115,1,0,0,
0,868,869,5,72,0,0,869,870,5,117,0,0,870,117,1,0,0,0,871,872,5,75,0,0,872,
873,5,117,0,0,873,119,1,0,0,0,874,875,5,76,0,0,875,876,5,117,0,0,876,121,
1,0,0,0,877,878,5,77,0,0,878,879,5,117,0,0,879,123,1,0,0,0,880,881,5,78,
0,0,881,882,5,117,0,0,882,125,1,0,0,0,883,884,5,117,0,0,884,127,1,0,0,0,
885,888,3,142,71,0,886,888,3,140,70,0,887,885,1,0,0,0,887,886,1,0,0,0,888,
129,1,0,0,0,889,892,3,142,71,0,890,892,3,140,70,0,891,889,1,0,0,0,891,890,
1,0,0,0,892,131,1,0,0,0,893,896,3,142,71,0,894,896,3,140,70,0,895,893,1,
0,0,0,895,894,1,0,0,0,896,133,1,0,0,0,897,898,3,152,76,0,898,899,5,47,0,
0,899,135,1,0,0,0,900,901,3,166,83,0,901,902,5,47,0,0,902,137,1,0,0,0,903,
904,3,126,63,0,904,905,5,47,0,0,905,139,1,0,0,0,906,907,3,142,71,0,907,908,
5,136,0,0,908,909,5,120,0,0,909,141,1,0,0,0,910,914,3,150,75,0,911,914,3,
144,72,0,912,914,3,154,77,0,913,910,1,0,0,0,913,911,1,0,0,0,913,912,1,0,
0,0,914,143,1,0,0,0,915,916,3,174,87,0,916,917,5,131,0,0,917,919,1,0,0,0,
918,915,1,0,0,0,918,919,1,0,0,0,919,920,1,0,0,0,920,921,3,146,73,0,921,145,
1,0,0,0,922,924,3,138,69,0,923,922,1,0,0,0,923,924,1,0,0,0,924,925,1,0,0,
0,925,926,3,148,74,0,926,147,1,0,0,0,927,929,3,136,68,0,928,927,1,0,0,0,
928,929,1,0,0,0,929,930,1,0,0,0,930,931,3,150,75,0,931,149,1,0,0,0,932,934,
3,134,67,0,933,932,1,0,0,0,933,934,1,0,0,0,934,935,1,0,0,0,935,936,3,156,
78,0,936,151,1,0,0,0,937,940,3,154,77,0,938,940,3,156,78,0,939,937,1,0,0,
0,939,938,1,0,0,0,940,153,1,0,0,0,941,942,5,131,0,0,942,943,3,156,78,0,943,
155,1,0,0,0,944,949,3,158,79,0,945,946,5,45,0,0,946,947,3,76,38,0,947,948,
5,46,0,0,948,950,1,0,0,0,949,945,1,0,0,0,949,950,1,0,0,0,950,157,1,0,0,0,
951,953,3,180,90,0,952,951,1,0,0,0,952,953,1,0,0,0,953,954,1,0,0,0,954,955,
3,160,80,0,955,159,1,0,0,0,956,957,5,115,0,0,957,161,1,0,0,0,958,961,3,168,
84,0,959,961,3,164,82,0,960,958,1,0,0,0,960,959,1,0,0,0,961,163,1,0,0,0,
962,963,3,174,87,0,963,964,5,131,0,0,964,965,3,170,85,0,965,165,1,0,0,0,
966,969,3,168,84,0,967,969,3,170,85,0,968,966,1,0,0,0,968,967,1,0,0,0,969,
167,1,0,0,0,970,971,5,131,0,0,971,972,3,170,85,0,972,169,1,0,0,0,973,978,
3,172,86,0,974,975,5,45,0,0,975,976,3,76,38,0,976,977,5,46,0,0,977,979,1,
0,0,0,978,974,1,0,0,0,978,979,1,0,0,0,979,171,1,0,0,0,980,981,5,116,0,0,
981,173,1,0,0,0,982,983,5,69,0,0,983,984,5,43,0,0,984,985,3,40,20,0,985,
986,5,44,0,0,986,175,1,0,0,0,987,988,5,43,0,0,988,989,3,178,89,0,989,990,
5,44,0,0,990,177,1,0,0,0,991,992,5,120,0,0,992,179,1,0,0,0,993,994,5,79,
0,0,994,995,5,47,0,0,995,181,1,0,0,0,996,997,5,91,0,0,997,998,5,43,0,0,998,
999,3,38,19,0,999,1000,5,44,0,0,1000,1030,1,0,0,0,1001,1002,5,96,0,0,1002,
1003,5,43,0,0,1003,1004,3,40,20,0,1004,1005,5,135,0,0,1005,1006,3,40,20,
0,1006,1007,5,44,0,0,1007,1030,1,0,0,0,1008,1009,5,97,0,0,1009,1010,5,43,
0,0,1010,1011,3,40,20,0,1011,1012,5,135,0,0,1012,1013,3,40,20,0,1013,1014,
5,44,0,0,1014,1030,1,0,0,0,1015,1016,5,98,0,0,1016,1017,5,43,0,0,1017,1018,
3,40,20,0,1018,1019,5,135,0,0,1019,1020,3,40,20,0,1020,1021,5,44,0,0,1021,
1030,1,0,0,0,1022,1023,5,113,0,0,1023,1024,5,43,0,0,1024,1025,3,50,25,0,
1025,1026,5,135,0,0,1026,1027,3,50,25,0,1027,1028,5,44,0,0,1028,1030,1,0,
0,0,1029,996,1,0,0,0,1029,1001,1,0,0,0,1029,1008,1,0,0,0,1029,1015,1,0,0,
0,1029,1022,1,0,0,0,1030,183,1,0,0,0,1031,1032,5,92,0,0,1032,1033,5,43,0,
0,1033,1034,3,50,25,0,1034,1035,5,44,0,0,1035,1052,1,0,0,0,1036,1037,5,95,
0,0,1037,1038,5,43,0,0,1038,1039,3,40,20,0,1039,1040,5,44,0,0,1040,1052,
1,0,0,0,1041,1042,5,100,0,0,1042,1043,5,43,0,0,1043,1044,3,60,30,0,1044,
1045,5,44,0,0,1045,1052,1,0,0,0,1046,1047,5,99,0,0,1047,1048,5,43,0,0,1048,
1049,3,40,20,0,1049,1050,5,44,0,0,1050,1052,1,0,0,0,1051,1031,1,0,0,0,1051,
1036,1,0,0,0,1051,1041,1,0,0,0,1051,1046,1,0,0,0,1052,185,1,0,0,0,1053,1054,
5,93,0,0,1054,1055,5,43,0,0,1055,1056,3,40,20,0,1056,1057,5,135,0,0,1057,
1060,3,42,21,0,1058,1059,5,135,0,0,1059,1061,3,42,21,0,1060,1058,1,0,0,0,
1060,1061,1,0,0,0,1061,1062,1,0,0,0,1062,1063,5,44,0,0,1063,1091,1,0,0,0,
1064,1065,5,94,0,0,1065,1066,5,43,0,0,1066,1067,3,42,21,0,1067,1068,5,44,
0,0,1068,1091,1,0,0,0,1069,1070,5,102,0,0,1070,1071,5,43,0,0,1071,1076,3,
40,20,0,1072,1073,5,135,0,0,1073,1075,3,40,20,0,1074,1072,1,0,0,0,1075,1078,
1,0,0,0,1076,1074,1,0,0,0,1076,1077,1,0,0,0,1077,1079,1,0,0,0,1078,1076,
1,0,0,0,1079,1080,5,44,0,0,1080,1091,1,0,0,0,1081,1082,5,101,0,0,1082,1083,
5,43,0,0,1083,1086,3,42,21,0,1084,1085,5,135,0,0,1085,1087,3,40,20,0,1086,
1084,1,0,0,0,1086,1087,1,0,0,0,1087,1088,1,0,0,0,1088,1089,5,44,0,0,1089,
1091,1,0,0,0,1090,1053,1,0,0,0,1090,1064,1,0,0,0,1090,1069,1,0,0,0,1090,
1081,1,0,0,0,1091,187,1,0,0,0,1092,1093,5,103,0,0,1093,1094,5,43,0,0,1094,
1095,3,40,20,0,1095,1096,5,44,0,0,1096,1112,1,0,0,0,1097,1098,5,107,0,0,
1098,1099,5,43,0,0,1099,1100,3,44,22,0,1100,1101,5,135,0,0,1101,1102,3,48,
24,0,1102,1103,5,44,0,0,1103,1112,1,0,0,0,1104,1105,5,108,0,0,1105,1106,
5,43,0,0,1106,1107,3,44,22,0,1107,1108,5,135,0,0,1108,1109,3,48,24,0,1109,
1110,5,44,0,0,1110,1112,1,0,0,0,1111,1092,1,0,0,0,1111,1097,1,0,0,0,1111,
1104,1,0,0,0,1112,189,1,0,0,0,1113,1114,5,104,0,0,1114,1115,5,43,0,0,1115,
1116,3,40,20,0,1116,1117,5,44,0,0,1117,191,1,0,0,0,1118,1119,5,105,0,0,1119,
1120,5,43,0,0,1120,1121,3,40,20,0,1121,1122,5,44,0,0,1122,1129,1,0,0,0,1123,
1124,5,106,0,0,1124,1125,5,43,0,0,1125,1126,3,40,20,0,1126,1127,5,44,0,0,
1127,1129,1,0,0,0,1128,1118,1,0,0,0,1128,1123,1,0,0,0,1129,193,1,0,0,0,1130,
1131,5,109,0,0,1131,1134,5,43,0,0,1132,1135,3,50,25,0,1133,1135,3,126,63,
0,1134,1132,1,0,0,0,1134,1133,1,0,0,0,1135,1136,1,0,0,0,1136,1137,5,44,0,
0,1137,1178,1,0,0,0,1138,1139,5,110,0,0,1139,1142,5,43,0,0,1140,1143,3,50,
25,0,1141,1143,3,126,63,0,1142,1140,1,0,0,0,1142,1141,1,0,0,0,1143,1144,
1,0,0,0,1144,1147,5,135,0,0,1145,1148,3,50,25,0,1146,1148,3,126,63,0,1147,
1145,1,0,0,0,1147,1146,1,0,0,0,1148,1149,1,0,0,0,1149,1150,5,44,0,0,1150,
1178,1,0,0,0,1151,1152,5,111,0,0,1152,1155,5,43,0,0,1153,1156,3,50,25,0,
1154,1156,3,126,63,0,1155,1153,1,0,0,0,1155,1154,1,0,0,0,1156,1157,1,0,0,
0,1157,1160,5,135,0,0,1158,1161,3,50,25,0,1159,1161,3,126,63,0,1160,1158,
1,0,0,0,1160,1159,1,0,0,0,1161,1162,1,0,0,0,1162,1163,5,44,0,0,1163,1178,
1,0,0,0,1164,1165,5,112,0,0,1165,1168,5,43,0,0,1166,1169,3,50,25,0,1167,
1169,3,126,63,0,1168,1166,1,0,0,0,1168,1167,1,0,0,0,1169,1170,1,0,0,0,1170,
1173,5,135,0,0,1171,1174,3,50,25,0,1172,1174,3,126,63,0,1173,1171,1,0,0,
0,1173,1172,1,0,0,0,1174,1175,1,0,0,0,1175,1176,5,44,0,0,1176,1178,1,0,0,
0,1177,1130,1,0,0,0,1177,1138,1,0,0,0,1177,1151,1,0,0,0,1177,1164,1,0,0,
0,1178,195,1,0,0,0,98,200,209,215,218,228,232,236,238,244,249,252,257,286,
290,294,300,309,319,326,341,350,362,374,383,390,397,404,411,418,426,433,
440,487,500,504,506,521,540,548,550,565,579,606,617,619,630,638,650,653,
666,677,680,693,704,707,720,731,734,747,758,761,774,785,788,802,812,842,
850,887,891,895,913,918,923,928,933,939,949,952,960,968,978,1029,1051,1060,
1076,1086,1090,1111,1128,1134,1142,1147,1155,1160,1168,1173,1177];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class EfxParser extends antlr4.Parser {

    static grammarFileName = "Efx.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, "'value'", null, null, 
                            null, null, "'|'", null, null, "'business-term'", 
                            "'field'", "'node'", "'group'", "'view'", null, 
                            null, "'code'", "'indicator'", "'auxiliary'", 
                            "'rule'", "'expression'", "'interval'", "'pattern'", 
                            null, "'name'", "'when-true'", "'when-false'", 
                            "'description'", "'hint'", "'text'", "'template'", 
                            null, "'('", "')'", "'['", "']'", null, null, 
                            "'and'", "'or'", "'is'", "'in'", "'like'", "'present'", 
                            "'empty'", "'unique'", "'every'", "'some'", 
                            "'satisfies'", "'if'", "'then'", "'else'", "'for'", 
                            "'return'", "'ALWAYS'", "'NEVER'", "'TRUE'", 
                            "'FALSE'", null, null, "'indicator:'", "'number:'", 
                            "'text:'", "'code:'", "'date:'", "'time:'", 
                            "'measure:'", "'context:'", null, "'preceding'", 
                            "'following'", "'preceding-sibling'", "'following-sibling'", 
                            "'ancestor'", "'ancestor-or-self'", "'descendant'", 
                            "'descendant-or-self'", "'child'", "'self'", 
                            "'parent'", "'not'", "'count'", "'substring'", 
                            "'string'", "'number'", "'contains'", "'starts-with'", 
                            "'ends-with'", "'string-length'", "'sum'", "'format-number'", 
                            "'concat'", "'date'", "'time'", "'day-time-duration'", 
                            "'year-month-duration'", "'add-measure'", "'subtract-measure'", 
                            "'distinct-values'", "'value-union'", "'value-intersect'", 
                            "'value-except'", "'sequence-equal'", null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, "'*'", 
                            "'/'", "'%'", "'+'", "'-'", "','", "'/@'", "':'" ];
    static symbolicNames = [ null, "Comment", "EmptyLine", "MixedIndent", 
                             "Tabs", "Spaces", "OutlineNumber", "SWS", "CRLF", 
                             "FreeText", "ShorthandFieldValueReferenceFromContextField", 
                             "ShorthandIndirectLabelReferenceFromContextField", 
                             "ValueKeyword", "StartExpression", "StartLabel", 
                             "EndOfLineComment", "Whitespace", "Pipe", "EndLabel", 
                             "AssetType", "ASSET_TYPE_BT", "ASSET_TYPE_FIELD", 
                             "ASSET_TYPE_NODE", "ASSET_TYPE_DISPLAY_GROUP", 
                             "ASSET_TYPE_VIEW_TEMPLATE", "ASSET_TYPE_NOTICE", 
                             "ASSET_TYPE_CODE_LIST", "ASSET_TYPE_CODE", 
                             "ASSET_TYPE_INDICATOR", "ASSET_TYPE_AUXILIARY", 
                             "ASSET_TYPE_RULE", "ASSET_TYPE_EXPRESSION", 
                             "ASSET_TYPE_INTERVAL", "ASSET_TYPE_PATTERN", 
                             "LabelType", "LABEL_TYPE_NAME", "LABEL_TYPE_WHEN_TRUE", 
                             "LABEL_TYPE_WHEN_FALSE", "LABEL_TYPE_DESCRIPTION", 
                             "LABEL_TYPE_TOOLTIP", "LABEL_TYPE_TEXT", "LABEL_TYPE_TEMPLATE", 
                             "OtherAssetId", "OpenParenthesis", "CloseParenthesis", 
                             "OpenBracket", "CloseBracket", "ColonColon", 
                             "EndExpression", "And", "Or", "Is", "In", "Like", 
                             "Present", "Empty", "Unique", "Every", "Some", 
                             "Satisfies", "If", "Then", "Else", "For", "Return", 
                             "Always", "Never", "True", "False", "Notice", 
                             "Codelist", "BooleanTypeCast", "NumericTypeCast", 
                             "TextTypeCast", "CodeTypeCast", "DateTypeCast", 
                             "TimeTypeCast", "DurationTypeCast", "ContextTypeCast", 
                             "Axis", "Preceding", "Following", "PrecedingSibling", 
                             "FollowingSibling", "Ancestor", "AncestorOrSelf", 
                             "Descendant", "DescendantOrSelf", "Child", 
                             "Self", "Parent", "Not", "CountFunction", "SubstringFunction", 
                             "StringFunction", "NumberFunction", "ContainsFunction", 
                             "StartsWithFunction", "EndsWithFunction", "StringLengthFunction", 
                             "SumFunction", "FormatNumberFunction", "ConcatFunction", 
                             "DateFunction", "TimeFunction", "DayTimeDurationFunction", 
                             "YearMonthDurationFunction", "AddMeasure", 
                             "SubtractMeasure", "DistinctValuesFunction", 
                             "UnionFunction", "IntersectFunction", "ExceptFunction", 
                             "SequenceEqualFunction", "BtId", "FieldId", 
                             "NodeId", "Variable", "DayTimeDurationLiteral", 
                             "YearMonthDurationLiteral", "Identifier", "IdentifierPart", 
                             "INTEGER", "DECIMAL", "STRING", "UUIDV4", "DATE", 
                             "TIME", "ZONE", "Comparison", "Star", "Slash", 
                             "Percent", "Plus", "Minus", "Comma", "SlashAt", 
                             "Colon", "WS" ];
    static ruleNames = [ "singleExpression", "templateFile", "templateLine", 
                         "template", "templateFragment", "textBlock", "whitespace", 
                         "labelBlock", "assetType", "labelType", "assetId", 
                         "otherAssetId", "expressionBlock", "contextDeclarationBlock", 
                         "parameterList", "parameterDeclaration", "parameterValue", 
                         "expression", "lateBoundExpression", "booleanExpression", 
                         "stringExpression", "numericExpression", "dateExpression", 
                         "timeExpression", "durationExpression", "sequenceExpression", 
                         "stringSequence", "stringSequenceFromIteration", 
                         "booleanSequence", "booleanSequenceFromIteration", 
                         "numericSequence", "numericSequenceFromIteration", 
                         "dateSequence", "dateSequenceFromIteration", "timeSequence", 
                         "timeSequenceFromIteration", "durationSequence", 
                         "durationSequenceFromIteration", "predicate", "iteratorList", 
                         "iteratorExpression", "stringIteratorExpression", 
                         "booleanIteratorExpression", "numericIteratorExpression", 
                         "dateIteratorExpression", "timeIteratorExpression", 
                         "durationIteratorExpression", "contextIteratorExpression", 
                         "stringLiteral", "numericLiteral", "booleanLiteral", 
                         "trueBooleanLiteral", "falseBooleanLiteral", "dateLiteral", 
                         "timeLiteral", "durationLiteral", "stringVariableDeclaration", 
                         "booleanVariableDeclaration", "numericVariableDeclaration", 
                         "dateVariableDeclaration", "timeVariableDeclaration", 
                         "durationVariableDeclaration", "contextVariableDeclaration", 
                         "variableReference", "scalarFromReference", "sequenceFromReference", 
                         "pathFromReference", "contextFieldSpecifier", "contextNodeSpecifier", 
                         "contextVariableSpecifier", "attributeReference", 
                         "fieldReference", "fieldReferenceInOtherNotice", 
                         "fieldReferenceWithVariableContextOverride", "fieldReferenceWithNodeContextOverride", 
                         "fieldReferenceWithFieldContextOverride", "fieldContext", 
                         "absoluteFieldReference", "fieldReferenceWithPredicate", 
                         "fieldReferenceWithAxis", "simpleFieldReference", 
                         "nodeReference", "nodeReferenceInOtherNotice", 
                         "nodeContext", "absoluteNodeReference", "nodeReferenceWithPredicate", 
                         "simpleNodeReference", "noticeReference", "codelistReference", 
                         "codelistId", "axis", "booleanFunction", "numericFunction", 
                         "stringFunction", "dateFunction", "timeFunction", 
                         "durationFunction", "sequenceFunction" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = EfxParser.ruleNames;
        this.literalNames = EfxParser.literalNames;
        this.symbolicNames = EfxParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 19:
    	    		return this.booleanExpression_sempred(localctx, predIndex);
    	case 21:
    	    		return this.numericExpression_sempred(localctx, predIndex);
    	case 24:
    	    		return this.durationExpression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    booleanExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 25);
    		case 1:
    			return this.precpred(this._ctx, 24);
    		case 2:
    			return this.precpred(this._ctx, 12);
    		case 3:
    			return this.precpred(this._ctx, 22);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    numericExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 7);
    		case 5:
    			return this.precpred(this._ctx, 6);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    durationExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 7);
    		case 7:
    			return this.precpred(this._ctx, 6);
    		case 8:
    			return this.precpred(this._ctx, 8);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	singleExpression() {
	    let localctx = new SingleExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, EfxParser.RULE_singleExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 196;
	        this.match(EfxParser.StartExpression);
	        this.state = 197;
	        _la = this._input.LA(1);
	        if(!(_la===115 || _la===116)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 200;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===135) {
	            this.state = 198;
	            this.match(EfxParser.Comma);
	            this.state = 199;
	            this.parameterList();
	        }

	        this.state = 202;
	        this.match(EfxParser.EndExpression);
	        this.state = 203;
	        this.expressionBlock();
	        this.state = 204;
	        this.match(EfxParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateFile() {
	    let localctx = new TemplateFileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, EfxParser.RULE_templateFile);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 209;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 8312) !== 0)) {
	            this.state = 206;
	            this.templateLine();
	            this.state = 211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 212;
	        this.match(EfxParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateLine() {
	    let localctx = new TemplateLineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, EfxParser.RULE_templateLine);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 215;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 56) !== 0)) {
	            this.state = 214;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 56) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 218;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6) {
	            this.state = 217;
	            this.match(EfxParser.OutlineNumber);
	        }

	        this.state = 220;
	        this.contextDeclarationBlock();
	        this.state = 221;
	        this.template();
	        this.state = 222;
	        this.match(EfxParser.CRLF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	template() {
	    let localctx = new TemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, EfxParser.RULE_template);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 224;
	        this.templateFragment();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	templateFragment() {
	    let localctx = new TemplateFragmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, EfxParser.RULE_templateFragment);
	    var _la = 0;
	    try {
	        this.state = 238;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 9:
	        case 16:
	            localctx = new TextTemplateContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 226;
	            this.textBlock();
	            this.state = 228;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 93696) !== 0)) {
	                this.state = 227;
	                this.templateFragment();
	            }

	            break;
	        case 11:
	        case 14:
	            localctx = new LabelTemplateContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 230;
	            this.labelBlock();
	            this.state = 232;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 93696) !== 0)) {
	                this.state = 231;
	                this.templateFragment();
	            }

	            break;
	        case 10:
	        case 13:
	            localctx = new ExpressionTemplateContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 234;
	            this.expressionBlock();
	            this.state = 236;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 93696) !== 0)) {
	                this.state = 235;
	                this.templateFragment();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textBlock() {
	    let localctx = new TextBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, EfxParser.RULE_textBlock);
	    try {
	        this.state = 252;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 16:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 240;
	            this.whitespace();
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 242; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 241;
	            		this.match(EfxParser.FreeText);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 244; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,8, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 249;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,9,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 246;
	                    this.textBlock(); 
	                }
	                this.state = 251;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,9,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whitespace() {
	    let localctx = new WhitespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, EfxParser.RULE_whitespace);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 255; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 254;
	        		this.match(EfxParser.Whitespace);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 257; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,11, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelBlock() {
	    let localctx = new LabelBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, EfxParser.RULE_labelBlock);
	    try {
	        this.state = 286;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new StandardLabelReferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 259;
	            this.match(EfxParser.StartLabel);
	            this.state = 260;
	            this.assetType();
	            this.state = 261;
	            this.match(EfxParser.Pipe);
	            this.state = 262;
	            this.labelType();
	            this.state = 263;
	            this.match(EfxParser.Pipe);
	            this.state = 264;
	            this.assetId();
	            this.state = 265;
	            this.match(EfxParser.EndLabel);
	            break;

	        case 2:
	            localctx = new ShorthandBtLabelReferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 267;
	            this.match(EfxParser.StartLabel);
	            this.state = 268;
	            this.labelType();
	            this.state = 269;
	            this.match(EfxParser.Pipe);
	            this.state = 270;
	            this.match(EfxParser.BtId);
	            this.state = 271;
	            this.match(EfxParser.EndLabel);
	            break;

	        case 3:
	            localctx = new ShorthandFieldLabelReferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 273;
	            this.match(EfxParser.StartLabel);
	            this.state = 274;
	            this.labelType();
	            this.state = 275;
	            this.match(EfxParser.Pipe);
	            this.state = 276;
	            this.match(EfxParser.FieldId);
	            this.state = 277;
	            this.match(EfxParser.EndLabel);
	            break;

	        case 4:
	            localctx = new ShorthandIndirectLabelReferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 279;
	            this.match(EfxParser.StartLabel);
	            this.state = 280;
	            this.match(EfxParser.FieldId);
	            this.state = 281;
	            this.match(EfxParser.EndLabel);
	            break;

	        case 5:
	            localctx = new ShorthandLabelReferenceFromContextContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 282;
	            this.match(EfxParser.StartLabel);
	            this.state = 283;
	            this.match(EfxParser.LabelType);
	            this.state = 284;
	            this.match(EfxParser.EndLabel);
	            break;

	        case 6:
	            localctx = new ShorthandIndirectLabelReferenceFromContextFieldContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 285;
	            this.match(EfxParser.ShorthandIndirectLabelReferenceFromContextField);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assetType() {
	    let localctx = new AssetTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, EfxParser.RULE_assetType);
	    try {
	        this.state = 290;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 19:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 288;
	            this.match(EfxParser.AssetType);
	            break;
	        case 10:
	        case 13:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 289;
	            this.expressionBlock();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelType() {
	    let localctx = new LabelTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, EfxParser.RULE_labelType);
	    try {
	        this.state = 294;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 292;
	            this.match(EfxParser.LabelType);
	            break;
	        case 10:
	        case 13:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 293;
	            this.expressionBlock();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assetId() {
	    let localctx = new AssetIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, EfxParser.RULE_assetId);
	    try {
	        this.state = 300;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 114:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 296;
	            this.match(EfxParser.BtId);
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 297;
	            this.match(EfxParser.FieldId);
	            break;
	        case 19:
	        case 34:
	        case 42:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 298;
	            this.otherAssetId();
	            break;
	        case 10:
	        case 13:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 299;
	            this.expressionBlock();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	otherAssetId() {
	    let localctx = new OtherAssetIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, EfxParser.RULE_otherAssetId);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 302;
	        _la = this._input.LA(1);
	        if(!(((((_la - 19)) & ~0x1f) === 0 && ((1 << (_la - 19)) & 8421377) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionBlock() {
	    let localctx = new ExpressionBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, EfxParser.RULE_expressionBlock);
	    try {
	        this.state = 309;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 13:
	            localctx = new StandardExpressionBlockContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 304;
	            this.match(EfxParser.StartExpression);
	            this.state = 305;
	            this.expression();
	            this.state = 306;
	            this.match(EfxParser.EndExpression);
	            break;
	        case 10:
	            localctx = new ShorthandFieldValueReferenceFromContextFieldContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 308;
	            this.match(EfxParser.ShorthandFieldValueReferenceFromContextField);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contextDeclarationBlock() {
	    let localctx = new ContextDeclarationBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, EfxParser.RULE_contextDeclarationBlock);
	    try {
	        this.state = 319;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 311;
	            this.match(EfxParser.StartExpression);
	            this.state = 312;
	            this.fieldContext();
	            this.state = 313;
	            this.match(EfxParser.EndExpression);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 315;
	            this.match(EfxParser.StartExpression);
	            this.state = 316;
	            this.nodeContext();
	            this.state = 317;
	            this.match(EfxParser.EndExpression);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterList() {
	    let localctx = new ParameterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, EfxParser.RULE_parameterList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 321;
	        this.parameterDeclaration();
	        this.state = 326;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===135) {
	            this.state = 322;
	            this.match(EfxParser.Comma);
	            this.state = 323;
	            this.parameterDeclaration();
	            this.state = 328;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterDeclaration() {
	    let localctx = new ParameterDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, EfxParser.RULE_parameterDeclaration);
	    try {
	        this.state = 341;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 73:
	            localctx = new StringParameterDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 329;
	            this.match(EfxParser.TextTypeCast);
	            this.state = 330;
	            this.match(EfxParser.Variable);
	            break;
	        case 72:
	            localctx = new NumericParameterDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 331;
	            this.match(EfxParser.NumericTypeCast);
	            this.state = 332;
	            this.match(EfxParser.Variable);
	            break;
	        case 71:
	            localctx = new BooleanParameterDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 333;
	            this.match(EfxParser.BooleanTypeCast);
	            this.state = 334;
	            this.match(EfxParser.Variable);
	            break;
	        case 75:
	            localctx = new DateParameterDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 335;
	            this.match(EfxParser.DateTypeCast);
	            this.state = 336;
	            this.match(EfxParser.Variable);
	            break;
	        case 76:
	            localctx = new TimeParameterDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 337;
	            this.match(EfxParser.TimeTypeCast);
	            this.state = 338;
	            this.match(EfxParser.Variable);
	            break;
	        case 77:
	            localctx = new DurationParameterDeclarationContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 339;
	            this.match(EfxParser.DurationTypeCast);
	            this.state = 340;
	            this.match(EfxParser.Variable);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterValue() {
	    let localctx = new ParameterValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, EfxParser.RULE_parameterValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 343;
	        this.match(EfxParser.StartExpression);
	        this.state = 350;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 124:
	        case 125:
	            this.state = 344;
	            this.stringLiteral();
	            break;
	        case 122:
	        case 123:
	            this.state = 345;
	            this.numericLiteral();
	            break;
	        case 126:
	            this.state = 346;
	            this.dateLiteral();
	            break;
	        case 127:
	            this.state = 347;
	            this.timeLiteral();
	            break;
	        case 118:
	        case 119:
	            this.state = 348;
	            this.durationLiteral();
	            break;
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	            this.state = 349;
	            this.booleanLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 352;
	        this.match(EfxParser.EndExpression);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, EfxParser.RULE_expression);
	    try {
	        this.state = 362;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 354;
	            this.lateBoundExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 355;
	            this.numericExpression(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 356;
	            this.stringExpression();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 357;
	            this.booleanExpression(0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 358;
	            this.dateExpression();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 359;
	            this.timeExpression();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 360;
	            this.durationExpression(0);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 361;
	            this.sequenceExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lateBoundExpression() {
	    let localctx = new LateBoundExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, EfxParser.RULE_lateBoundExpression);
	    try {
	        this.state = 374;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new UntypedConditionalExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 364;
	            this.match(EfxParser.If);
	            this.state = 365;
	            this.booleanExpression(0);
	            this.state = 366;
	            this.match(EfxParser.Then);
	            this.state = 367;
	            this.lateBoundExpression();
	            this.state = 368;
	            this.match(EfxParser.Else);
	            this.state = 369;
	            this.lateBoundExpression();
	            break;

	        case 2:
	            localctx = new UntypedFieldReferenceExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 371;
	            this.scalarFromReference();
	            break;

	        case 3:
	            localctx = new UntypedSequenceExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 372;
	            this.sequenceFromReference();
	            break;

	        case 4:
	            localctx = new UntypedVariableExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 373;
	            this.variableReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	booleanExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BooleanExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 38;
	    this.enterRecursionRule(localctx, 38, EfxParser.RULE_booleanExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 487;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ParenthesizedBooleanExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 377;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 378;
	            this.booleanExpression(0);
	            this.state = 379;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 2:
	            localctx = new StringInListConditionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 381;
	            this.stringExpression();
	            this.state = 383;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===91) {
	                this.state = 382;
	                localctx.modifier = this.match(EfxParser.Not);
	            }

	            this.state = 385;
	            this.match(EfxParser.In);
	            this.state = 386;
	            this.stringSequence();
	            break;

	        case 3:
	            localctx = new NumberInListConditionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 388;
	            this.numericExpression(0);
	            this.state = 390;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===91) {
	                this.state = 389;
	                localctx.modifier = this.match(EfxParser.Not);
	            }

	            this.state = 392;
	            this.match(EfxParser.In);
	            this.state = 393;
	            this.numericSequence();
	            break;

	        case 4:
	            localctx = new DateInListConditionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 395;
	            this.dateExpression();
	            this.state = 397;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===91) {
	                this.state = 396;
	                localctx.modifier = this.match(EfxParser.Not);
	            }

	            this.state = 399;
	            this.match(EfxParser.In);
	            this.state = 400;
	            this.dateSequence();
	            break;

	        case 5:
	            localctx = new TimeInListConditionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 402;
	            this.timeExpression();
	            this.state = 404;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===91) {
	                this.state = 403;
	                localctx.modifier = this.match(EfxParser.Not);
	            }

	            this.state = 406;
	            this.match(EfxParser.In);
	            this.state = 407;
	            this.timeSequence();
	            break;

	        case 6:
	            localctx = new DurationInListConditionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 409;
	            this.durationExpression(0);
	            this.state = 411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===91) {
	                this.state = 410;
	                localctx.modifier = this.match(EfxParser.Not);
	            }

	            this.state = 413;
	            this.match(EfxParser.In);
	            this.state = 414;
	            this.durationSequence();
	            break;

	        case 7:
	            localctx = new LikePatternConditionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 416;
	            this.stringExpression();
	            this.state = 418;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===91) {
	                this.state = 417;
	                localctx.modifier = this.match(EfxParser.Not);
	            }

	            this.state = 420;
	            this.match(EfxParser.Like);
	            this.state = 421;
	            localctx.pattern = this.match(EfxParser.STRING);
	            break;

	        case 8:
	            localctx = new EmptinessConditionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 423;
	            this.stringExpression();
	            this.state = 424;
	            this.match(EfxParser.Is);
	            this.state = 426;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===91) {
	                this.state = 425;
	                localctx.modifier = this.match(EfxParser.Not);
	            }

	            this.state = 428;
	            this.match(EfxParser.Empty);
	            break;

	        case 9:
	            localctx = new PresenceConditionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 430;
	            this.pathFromReference();
	            this.state = 431;
	            this.match(EfxParser.Is);
	            this.state = 433;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===91) {
	                this.state = 432;
	                localctx.modifier = this.match(EfxParser.Not);
	            }

	            this.state = 435;
	            this.match(EfxParser.Present);
	            break;

	        case 10:
	            localctx = new UniqueValueConditionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 437;
	            this.pathFromReference();
	            this.state = 438;
	            this.match(EfxParser.Is);
	            this.state = 440;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===91) {
	                this.state = 439;
	                localctx.modifier = this.match(EfxParser.Not);
	            }

	            this.state = 442;
	            this.match(EfxParser.Unique);
	            this.state = 443;
	            this.match(EfxParser.In);
	            this.state = 444;
	            this.absoluteFieldReference();
	            break;

	        case 11:
	            localctx = new FieldValueComparisonContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 446;
	            this.lateBoundExpression();
	            this.state = 447;
	            localctx.operator = this.match(EfxParser.Comparison);
	            this.state = 448;
	            this.lateBoundExpression();
	            break;

	        case 12:
	            localctx = new NumericComparisonContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 450;
	            this.numericExpression(0);
	            this.state = 451;
	            localctx.operator = this.match(EfxParser.Comparison);
	            this.state = 452;
	            this.numericExpression(0);
	            break;

	        case 13:
	            localctx = new StringComparisonContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 454;
	            this.stringExpression();
	            this.state = 455;
	            localctx.operator = this.match(EfxParser.Comparison);
	            this.state = 456;
	            this.stringExpression();
	            break;

	        case 14:
	            localctx = new DateComparisonContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 458;
	            this.dateExpression();
	            this.state = 459;
	            localctx.operator = this.match(EfxParser.Comparison);
	            this.state = 460;
	            this.dateExpression();
	            break;

	        case 15:
	            localctx = new TimeComparisonContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 462;
	            this.timeExpression();
	            this.state = 463;
	            localctx.operator = this.match(EfxParser.Comparison);
	            this.state = 464;
	            this.timeExpression();
	            break;

	        case 16:
	            localctx = new DurationComparisonContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 466;
	            this.durationExpression(0);
	            this.state = 467;
	            localctx.operator = this.match(EfxParser.Comparison);
	            this.state = 468;
	            this.durationExpression(0);
	            break;

	        case 17:
	            localctx = new ConditionalBooleanExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 470;
	            this.match(EfxParser.If);
	            this.state = 471;
	            this.booleanExpression(0);
	            this.state = 472;
	            this.match(EfxParser.Then);
	            this.state = 473;
	            this.booleanExpression(0);
	            this.state = 474;
	            this.match(EfxParser.Else);
	            this.state = 475;
	            this.booleanExpression(6);
	            break;

	        case 18:
	            localctx = new QuantifiedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 477;
	            _la = this._input.LA(1);
	            if(!(_la===57 || _la===58)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 478;
	            this.iteratorList();
	            this.state = 479;
	            this.match(EfxParser.Satisfies);
	            this.state = 480;
	            this.booleanExpression(5);
	            break;

	        case 19:
	            localctx = new BooleanLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 482;
	            this.booleanLiteral();
	            break;

	        case 20:
	            localctx = new BooleanFunctionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 483;
	            this.booleanFunction();
	            break;

	        case 21:
	            localctx = new BooleanCastExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 484;
	            this.match(EfxParser.BooleanTypeCast);
	            this.state = 485;
	            this.lateBoundExpression();
	            break;

	        case 22:
	            localctx = new UntypedBooleanExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 486;
	            this.lateBoundExpression();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 506;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,35,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 504;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new LogicalOrConditionContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EfxParser.RULE_booleanExpression);
	                    this.state = 489;
	                    if (!( this.precpred(this._ctx, 25))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 25)");
	                    }
	                    this.state = 490;
	                    localctx.operator = this.match(EfxParser.Or);
	                    this.state = 491;
	                    this.booleanExpression(26);
	                    break;

	                case 2:
	                    localctx = new LogicalAndConditionContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EfxParser.RULE_booleanExpression);
	                    this.state = 492;
	                    if (!( this.precpred(this._ctx, 24))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 24)");
	                    }
	                    this.state = 493;
	                    localctx.operator = this.match(EfxParser.And);
	                    this.state = 494;
	                    this.booleanExpression(25);
	                    break;

	                case 3:
	                    localctx = new BooleanComparisonContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EfxParser.RULE_booleanExpression);
	                    this.state = 495;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 496;
	                    localctx.operator = this.match(EfxParser.Comparison);
	                    this.state = 497;
	                    this.booleanExpression(13);
	                    break;

	                case 4:
	                    localctx = new BooleanInListConditionContext(this, new BooleanExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EfxParser.RULE_booleanExpression);
	                    this.state = 498;
	                    if (!( this.precpred(this._ctx, 22))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 22)");
	                    }
	                    this.state = 500;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===91) {
	                        this.state = 499;
	                        localctx.modifier = this.match(EfxParser.Not);
	                    }

	                    this.state = 502;
	                    this.match(EfxParser.In);
	                    this.state = 503;
	                    this.booleanSequence();
	                    break;

	                } 
	            }
	            this.state = 508;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,35,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	stringExpression() {
	    let localctx = new StringExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, EfxParser.RULE_stringExpression);
	    try {
	        this.state = 521;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ConditionalStringExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 509;
	            this.match(EfxParser.If);
	            this.state = 510;
	            this.booleanExpression(0);
	            this.state = 511;
	            this.match(EfxParser.Then);
	            this.state = 512;
	            this.stringExpression();
	            this.state = 513;
	            this.match(EfxParser.Else);
	            this.state = 514;
	            this.stringExpression();
	            break;

	        case 2:
	            localctx = new StringLiteralExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 516;
	            this.stringLiteral();
	            break;

	        case 3:
	            localctx = new StringFunctionExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 517;
	            this.stringFunction();
	            break;

	        case 4:
	            localctx = new StringCastExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 518;
	            this.match(EfxParser.TextTypeCast);
	            this.state = 519;
	            this.lateBoundExpression();
	            break;

	        case 5:
	            localctx = new UntypedStringExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 520;
	            this.lateBoundExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	numericExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new NumericExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 42;
	    this.enterRecursionRule(localctx, 42, EfxParser.RULE_numericExpression, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 540;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ParenthesizedNumericExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 524;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 525;
	            this.numericExpression(0);
	            this.state = 526;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 2:
	            localctx = new ConditionalNumericExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 528;
	            this.match(EfxParser.If);
	            this.state = 529;
	            this.booleanExpression(0);
	            this.state = 530;
	            this.match(EfxParser.Then);
	            this.state = 531;
	            this.numericExpression(0);
	            this.state = 532;
	            this.match(EfxParser.Else);
	            this.state = 533;
	            this.numericExpression(5);
	            break;

	        case 3:
	            localctx = new NumericLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 535;
	            this.numericLiteral();
	            break;

	        case 4:
	            localctx = new NumericFunctionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 536;
	            this.numericFunction();
	            break;

	        case 5:
	            localctx = new NumericCastExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 537;
	            this.match(EfxParser.NumericTypeCast);
	            this.state = 538;
	            this.lateBoundExpression();
	            break;

	        case 6:
	            localctx = new UntypedNumericExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 539;
	            this.lateBoundExpression();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 550;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,39,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 548;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new MultiplicationExpressionContext(this, new NumericExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EfxParser.RULE_numericExpression);
	                    this.state = 542;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 543;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 130)) & ~0x1f) === 0 && ((1 << (_la - 130)) & 7) !== 0))) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 544;
	                    this.numericExpression(8);
	                    break;

	                case 2:
	                    localctx = new AdditionExpressionContext(this, new NumericExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EfxParser.RULE_numericExpression);
	                    this.state = 545;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 546;
	                    localctx.operator = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===133 || _la===134)) {
	                        localctx.operator = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 547;
	                    this.numericExpression(7);
	                    break;

	                } 
	            }
	            this.state = 552;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,39,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	dateExpression() {
	    let localctx = new DateExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, EfxParser.RULE_dateExpression);
	    try {
	        this.state = 565;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ConditionalDateExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 553;
	            this.match(EfxParser.If);
	            this.state = 554;
	            this.booleanExpression(0);
	            this.state = 555;
	            this.match(EfxParser.Then);
	            this.state = 556;
	            this.dateExpression();
	            this.state = 557;
	            this.match(EfxParser.Else);
	            this.state = 558;
	            this.dateExpression();
	            break;

	        case 2:
	            localctx = new DateLiteralExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 560;
	            this.dateLiteral();
	            break;

	        case 3:
	            localctx = new DateFunctionExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 561;
	            this.dateFunction();
	            break;

	        case 4:
	            localctx = new DateCastExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 562;
	            this.match(EfxParser.DateTypeCast);
	            this.state = 563;
	            this.lateBoundExpression();
	            break;

	        case 5:
	            localctx = new UntypedDateExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 564;
	            this.lateBoundExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeExpression() {
	    let localctx = new TimeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, EfxParser.RULE_timeExpression);
	    try {
	        this.state = 579;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,41,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ConditionalTimeExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 567;
	            this.match(EfxParser.If);
	            this.state = 568;
	            this.booleanExpression(0);
	            this.state = 569;
	            this.match(EfxParser.Then);
	            this.state = 570;
	            this.timeExpression();
	            this.state = 571;
	            this.match(EfxParser.Else);
	            this.state = 572;
	            this.timeExpression();
	            break;

	        case 2:
	            localctx = new TimeLiteralExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 574;
	            this.timeLiteral();
	            break;

	        case 3:
	            localctx = new TimeFunctionExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 575;
	            this.timeFunction();
	            break;

	        case 4:
	            localctx = new TimeCastExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 576;
	            this.match(EfxParser.TimeTypeCast);
	            this.state = 577;
	            this.lateBoundExpression();
	            break;

	        case 5:
	            localctx = new UntypedTimeExpressionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 578;
	            this.lateBoundExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	durationExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new DurationExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 48;
	    this.enterRecursionRule(localctx, 48, EfxParser.RULE_durationExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 606;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ParenthesizedDurationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 582;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 583;
	            this.durationExpression(0);
	            this.state = 584;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 2:
	            localctx = new DateSubtractionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 586;
	            localctx.endDate = this.dateExpression();
	            this.state = 587;
	            this.match(EfxParser.Minus);
	            this.state = 588;
	            localctx.startDate = this.dateExpression();
	            break;

	        case 3:
	            localctx = new DurationLeftMultiplicationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 590;
	            this.numericExpression(0);
	            this.state = 591;
	            this.match(EfxParser.Star);
	            this.state = 592;
	            this.durationExpression(9);
	            break;

	        case 4:
	            localctx = new ConditionalDurationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 594;
	            this.match(EfxParser.If);
	            this.state = 595;
	            this.booleanExpression(0);
	            this.state = 596;
	            this.match(EfxParser.Then);
	            this.state = 597;
	            this.durationExpression(0);
	            this.state = 598;
	            this.match(EfxParser.Else);
	            this.state = 599;
	            this.durationExpression(5);
	            break;

	        case 5:
	            localctx = new DurationLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 601;
	            this.durationLiteral();
	            break;

	        case 6:
	            localctx = new DurationFunctionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 602;
	            this.durationFunction();
	            break;

	        case 7:
	            localctx = new DurationCastExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 603;
	            this.match(EfxParser.DurationTypeCast);
	            this.state = 604;
	            this.lateBoundExpression();
	            break;

	        case 8:
	            localctx = new UntypedDurationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 605;
	            this.lateBoundExpression();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 619;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,44,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 617;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new DurationAdditionExpressionContext(this, new DurationExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EfxParser.RULE_durationExpression);
	                    this.state = 608;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 609;
	                    this.match(EfxParser.Plus);
	                    this.state = 610;
	                    this.durationExpression(8);
	                    break;

	                case 2:
	                    localctx = new DurationSubtractionExpressionContext(this, new DurationExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EfxParser.RULE_durationExpression);
	                    this.state = 611;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 612;
	                    this.match(EfxParser.Minus);
	                    this.state = 613;
	                    this.durationExpression(7);
	                    break;

	                case 3:
	                    localctx = new DurationRightMultiplicationExpressionContext(this, new DurationExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, EfxParser.RULE_durationExpression);
	                    this.state = 614;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 615;
	                    this.match(EfxParser.Star);
	                    this.state = 616;
	                    this.numericExpression(0);
	                    break;

	                } 
	            }
	            this.state = 621;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,44,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	sequenceExpression() {
	    let localctx = new SequenceExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, EfxParser.RULE_sequenceExpression);
	    try {
	        this.state = 630;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 622;
	            this.sequenceFromReference();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 623;
	            this.stringSequence();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 624;
	            this.booleanSequence();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 625;
	            this.numericSequence();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 626;
	            this.dateSequence();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 627;
	            this.timeSequence();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 628;
	            this.durationSequence();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 629;
	            this.sequenceFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringSequence() {
	    let localctx = new StringSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, EfxParser.RULE_stringSequence);
	    var _la = 0;
	    try {
	        this.state = 653;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new StringListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 632;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 633;
	            this.stringExpression();
	            this.state = 638;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===135) {
	                this.state = 634;
	                this.match(EfxParser.Comma);
	                this.state = 635;
	                this.stringExpression();
	                this.state = 640;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 641;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 2:
	            localctx = new StringsFromIterationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 643;
	            this.stringSequenceFromIteration();
	            break;

	        case 3:
	            localctx = new ParenthesizedStringsFromIterationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 644;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 645;
	            this.stringSequenceFromIteration();
	            this.state = 646;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 4:
	            localctx = new CodeListContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 648;
	            this.codelistReference();
	            break;

	        case 5:
	            localctx = new StringTypeCastFieldReferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 650;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===73) {
	                this.state = 649;
	                this.match(EfxParser.TextTypeCast);
	            }

	            this.state = 652;
	            this.sequenceFromReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringSequenceFromIteration() {
	    let localctx = new StringSequenceFromIterationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, EfxParser.RULE_stringSequenceFromIteration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 655;
	        this.match(EfxParser.For);
	        this.state = 656;
	        this.iteratorList();
	        this.state = 657;
	        this.match(EfxParser.Return);
	        this.state = 658;
	        this.stringExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanSequence() {
	    let localctx = new BooleanSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, EfxParser.RULE_booleanSequence);
	    var _la = 0;
	    try {
	        this.state = 680;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new BooleanListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 660;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 661;
	            this.booleanExpression(0);
	            this.state = 666;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===135) {
	                this.state = 662;
	                this.match(EfxParser.Comma);
	                this.state = 663;
	                this.booleanExpression(0);
	                this.state = 668;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 669;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 2:
	            localctx = new BooleansFromIterationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 671;
	            this.booleanSequenceFromIteration();
	            break;

	        case 3:
	            localctx = new ParenthesizedBooleansFromIterationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 672;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 673;
	            this.booleanSequenceFromIteration();
	            this.state = 674;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 4:
	            localctx = new BooleanTypeCastFieldReferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 677;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===71) {
	                this.state = 676;
	                this.match(EfxParser.BooleanTypeCast);
	            }

	            this.state = 679;
	            this.sequenceFromReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanSequenceFromIteration() {
	    let localctx = new BooleanSequenceFromIterationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, EfxParser.RULE_booleanSequenceFromIteration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 682;
	        this.match(EfxParser.For);
	        this.state = 683;
	        this.iteratorList();
	        this.state = 684;
	        this.match(EfxParser.Return);
	        this.state = 685;
	        this.booleanExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericSequence() {
	    let localctx = new NumericSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, EfxParser.RULE_numericSequence);
	    var _la = 0;
	    try {
	        this.state = 707;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new NumericListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 687;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 688;
	            this.numericExpression(0);
	            this.state = 693;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===135) {
	                this.state = 689;
	                this.match(EfxParser.Comma);
	                this.state = 690;
	                this.numericExpression(0);
	                this.state = 695;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 696;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 2:
	            localctx = new NumbersFromIterationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 698;
	            this.numericSequenceFromIteration();
	            break;

	        case 3:
	            localctx = new ParenthesizedNumbersFromIterationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 699;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 700;
	            this.numericSequenceFromIteration();
	            this.state = 701;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 4:
	            localctx = new NumericTypeCastFieldReferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 704;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 703;
	                this.match(EfxParser.NumericTypeCast);
	            }

	            this.state = 706;
	            this.sequenceFromReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericSequenceFromIteration() {
	    let localctx = new NumericSequenceFromIterationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, EfxParser.RULE_numericSequenceFromIteration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 709;
	        this.match(EfxParser.For);
	        this.state = 710;
	        this.iteratorList();
	        this.state = 711;
	        this.match(EfxParser.Return);
	        this.state = 712;
	        this.numericExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateSequence() {
	    let localctx = new DateSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, EfxParser.RULE_dateSequence);
	    var _la = 0;
	    try {
	        this.state = 734;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DateListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 714;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 715;
	            this.dateExpression();
	            this.state = 720;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===135) {
	                this.state = 716;
	                this.match(EfxParser.Comma);
	                this.state = 717;
	                this.dateExpression();
	                this.state = 722;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 723;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 2:
	            localctx = new DatesFromIterationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 725;
	            this.dateSequenceFromIteration();
	            break;

	        case 3:
	            localctx = new ParenthesizedDatesFromIterationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 726;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 727;
	            this.dateSequenceFromIteration();
	            this.state = 728;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 4:
	            localctx = new DateTypeCastFieldReferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 731;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===75) {
	                this.state = 730;
	                this.match(EfxParser.DateTypeCast);
	            }

	            this.state = 733;
	            this.sequenceFromReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateSequenceFromIteration() {
	    let localctx = new DateSequenceFromIterationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, EfxParser.RULE_dateSequenceFromIteration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 736;
	        this.match(EfxParser.For);
	        this.state = 737;
	        this.iteratorList();
	        this.state = 738;
	        this.match(EfxParser.Return);
	        this.state = 739;
	        this.dateExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeSequence() {
	    let localctx = new TimeSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, EfxParser.RULE_timeSequence);
	    var _la = 0;
	    try {
	        this.state = 761;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TimeListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 741;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 742;
	            this.timeExpression();
	            this.state = 747;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===135) {
	                this.state = 743;
	                this.match(EfxParser.Comma);
	                this.state = 744;
	                this.timeExpression();
	                this.state = 749;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 750;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 2:
	            localctx = new TimesFromIterationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 752;
	            this.timeSequenceFromIteration();
	            break;

	        case 3:
	            localctx = new ParenthesizedTimesFromIterationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 753;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 754;
	            this.timeSequenceFromIteration();
	            this.state = 755;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 4:
	            localctx = new TimeTypeCastFieldReferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 758;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===76) {
	                this.state = 757;
	                this.match(EfxParser.TimeTypeCast);
	            }

	            this.state = 760;
	            this.sequenceFromReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeSequenceFromIteration() {
	    let localctx = new TimeSequenceFromIterationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, EfxParser.RULE_timeSequenceFromIteration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 763;
	        this.match(EfxParser.For);
	        this.state = 764;
	        this.iteratorList();
	        this.state = 765;
	        this.match(EfxParser.Return);
	        this.state = 766;
	        this.timeExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationSequence() {
	    let localctx = new DurationSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, EfxParser.RULE_durationSequence);
	    var _la = 0;
	    try {
	        this.state = 788;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DurationListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 768;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 769;
	            this.durationExpression(0);
	            this.state = 774;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===135) {
	                this.state = 770;
	                this.match(EfxParser.Comma);
	                this.state = 771;
	                this.durationExpression(0);
	                this.state = 776;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 777;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 2:
	            localctx = new DurationsFromIterationContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 779;
	            this.durationSequenceFromIteration();
	            break;

	        case 3:
	            localctx = new ParenthesizedDurationsFromITerationContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 780;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 781;
	            this.durationSequenceFromIteration();
	            this.state = 782;
	            this.match(EfxParser.CloseParenthesis);
	            break;

	        case 4:
	            localctx = new DurationTypeCastFieldReferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 785;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===77) {
	                this.state = 784;
	                this.match(EfxParser.DurationTypeCast);
	            }

	            this.state = 787;
	            this.sequenceFromReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationSequenceFromIteration() {
	    let localctx = new DurationSequenceFromIterationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, EfxParser.RULE_durationSequenceFromIteration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 790;
	        this.match(EfxParser.For);
	        this.state = 791;
	        this.iteratorList();
	        this.state = 792;
	        this.match(EfxParser.Return);
	        this.state = 793;
	        this.durationExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicate() {
	    let localctx = new PredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, EfxParser.RULE_predicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 795;
	        this.booleanExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iteratorList() {
	    let localctx = new IteratorListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, EfxParser.RULE_iteratorList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 797;
	        this.iteratorExpression();
	        this.state = 802;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===135) {
	            this.state = 798;
	            this.match(EfxParser.Comma);
	            this.state = 799;
	            this.iteratorExpression();
	            this.state = 804;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iteratorExpression() {
	    let localctx = new IteratorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, EfxParser.RULE_iteratorExpression);
	    try {
	        this.state = 812;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 73:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 805;
	            this.stringIteratorExpression();
	            break;
	        case 71:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 806;
	            this.booleanIteratorExpression();
	            break;
	        case 72:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 807;
	            this.numericIteratorExpression();
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 808;
	            this.dateIteratorExpression();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 809;
	            this.timeIteratorExpression();
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 810;
	            this.durationIteratorExpression();
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 811;
	            this.contextIteratorExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringIteratorExpression() {
	    let localctx = new StringIteratorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, EfxParser.RULE_stringIteratorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 814;
	        this.stringVariableDeclaration();
	        this.state = 815;
	        this.match(EfxParser.In);
	        this.state = 816;
	        this.stringSequence();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanIteratorExpression() {
	    let localctx = new BooleanIteratorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, EfxParser.RULE_booleanIteratorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 818;
	        this.booleanVariableDeclaration();
	        this.state = 819;
	        this.match(EfxParser.In);
	        this.state = 820;
	        this.booleanSequence();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericIteratorExpression() {
	    let localctx = new NumericIteratorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, EfxParser.RULE_numericIteratorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 822;
	        this.numericVariableDeclaration();
	        this.state = 823;
	        this.match(EfxParser.In);
	        this.state = 824;
	        this.numericSequence();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateIteratorExpression() {
	    let localctx = new DateIteratorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, EfxParser.RULE_dateIteratorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 826;
	        this.dateVariableDeclaration();
	        this.state = 827;
	        this.match(EfxParser.In);
	        this.state = 828;
	        this.dateSequence();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeIteratorExpression() {
	    let localctx = new TimeIteratorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, EfxParser.RULE_timeIteratorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 830;
	        this.timeVariableDeclaration();
	        this.state = 831;
	        this.match(EfxParser.In);
	        this.state = 832;
	        this.timeSequence();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationIteratorExpression() {
	    let localctx = new DurationIteratorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, EfxParser.RULE_durationIteratorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 834;
	        this.durationVariableDeclaration();
	        this.state = 835;
	        this.match(EfxParser.In);
	        this.state = 836;
	        this.durationSequence();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contextIteratorExpression() {
	    let localctx = new ContextIteratorExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, EfxParser.RULE_contextIteratorExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 838;
	        this.contextVariableDeclaration();
	        this.state = 839;
	        this.match(EfxParser.In);
	        this.state = 842;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 840;
	            this.fieldContext();
	            break;

	        case 2:
	            this.state = 841;
	            this.nodeContext();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringLiteral() {
	    let localctx = new StringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, EfxParser.RULE_stringLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 844;
	        _la = this._input.LA(1);
	        if(!(_la===124 || _la===125)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, EfxParser.RULE_numericLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 846;
	        _la = this._input.LA(1);
	        if(!(_la===122 || _la===123)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, EfxParser.RULE_booleanLiteral);
	    try {
	        this.state = 850;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 65:
	        case 67:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 848;
	            this.trueBooleanLiteral();
	            break;
	        case 66:
	        case 68:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 849;
	            this.falseBooleanLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trueBooleanLiteral() {
	    let localctx = new TrueBooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, EfxParser.RULE_trueBooleanLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 852;
	        _la = this._input.LA(1);
	        if(!(_la===65 || _la===67)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	falseBooleanLiteral() {
	    let localctx = new FalseBooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, EfxParser.RULE_falseBooleanLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 854;
	        _la = this._input.LA(1);
	        if(!(_la===66 || _la===68)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateLiteral() {
	    let localctx = new DateLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, EfxParser.RULE_dateLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 856;
	        this.match(EfxParser.DATE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeLiteral() {
	    let localctx = new TimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, EfxParser.RULE_timeLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 858;
	        this.match(EfxParser.TIME);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationLiteral() {
	    let localctx = new DurationLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, EfxParser.RULE_durationLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 860;
	        _la = this._input.LA(1);
	        if(!(_la===118 || _la===119)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringVariableDeclaration() {
	    let localctx = new StringVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, EfxParser.RULE_stringVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 862;
	        this.match(EfxParser.TextTypeCast);
	        this.state = 863;
	        this.match(EfxParser.Variable);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanVariableDeclaration() {
	    let localctx = new BooleanVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, EfxParser.RULE_booleanVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 865;
	        this.match(EfxParser.BooleanTypeCast);
	        this.state = 866;
	        this.match(EfxParser.Variable);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericVariableDeclaration() {
	    let localctx = new NumericVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, EfxParser.RULE_numericVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 868;
	        this.match(EfxParser.NumericTypeCast);
	        this.state = 869;
	        this.match(EfxParser.Variable);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateVariableDeclaration() {
	    let localctx = new DateVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, EfxParser.RULE_dateVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 871;
	        this.match(EfxParser.DateTypeCast);
	        this.state = 872;
	        this.match(EfxParser.Variable);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeVariableDeclaration() {
	    let localctx = new TimeVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, EfxParser.RULE_timeVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 874;
	        this.match(EfxParser.TimeTypeCast);
	        this.state = 875;
	        this.match(EfxParser.Variable);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationVariableDeclaration() {
	    let localctx = new DurationVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, EfxParser.RULE_durationVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 877;
	        this.match(EfxParser.DurationTypeCast);
	        this.state = 878;
	        this.match(EfxParser.Variable);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contextVariableDeclaration() {
	    let localctx = new ContextVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, EfxParser.RULE_contextVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 880;
	        this.match(EfxParser.ContextTypeCast);
	        this.state = 881;
	        this.match(EfxParser.Variable);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableReference() {
	    let localctx = new VariableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, EfxParser.RULE_variableReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 883;
	        this.match(EfxParser.Variable);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scalarFromReference() {
	    let localctx = new ScalarFromReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, EfxParser.RULE_scalarFromReference);
	    try {
	        this.state = 887;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ScalarFromFieldReferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 885;
	            this.fieldReference();
	            break;

	        case 2:
	            localctx = new ScalarFromAttributeReferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 886;
	            this.attributeReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceFromReference() {
	    let localctx = new SequenceFromReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, EfxParser.RULE_sequenceFromReference);
	    try {
	        this.state = 891;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SequenceFromFieldReferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 889;
	            this.fieldReference();
	            break;

	        case 2:
	            localctx = new SequenceFromAttributeReferenceContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 890;
	            this.attributeReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathFromReference() {
	    let localctx = new PathFromReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, EfxParser.RULE_pathFromReference);
	    try {
	        this.state = 895;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 893;
	            this.fieldReference();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 894;
	            this.attributeReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contextFieldSpecifier() {
	    let localctx = new ContextFieldSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, EfxParser.RULE_contextFieldSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 897;
	        localctx.field = this.fieldContext();
	        this.state = 898;
	        this.match(EfxParser.ColonColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contextNodeSpecifier() {
	    let localctx = new ContextNodeSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, EfxParser.RULE_contextNodeSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 900;
	        localctx.node = this.nodeContext();
	        this.state = 901;
	        this.match(EfxParser.ColonColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contextVariableSpecifier() {
	    let localctx = new ContextVariableSpecifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, EfxParser.RULE_contextVariableSpecifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 903;
	        localctx.variable = this.variableReference();
	        this.state = 904;
	        this.match(EfxParser.ColonColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attributeReference() {
	    let localctx = new AttributeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, EfxParser.RULE_attributeReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 906;
	        this.fieldReference();
	        this.state = 907;
	        this.match(EfxParser.SlashAt);
	        this.state = 908;
	        this.match(EfxParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldReference() {
	    let localctx = new FieldReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, EfxParser.RULE_fieldReference);
	    try {
	        this.state = 913;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 910;
	            this.fieldReferenceWithFieldContextOverride();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 911;
	            this.fieldReferenceInOtherNotice();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 912;
	            this.absoluteFieldReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldReferenceInOtherNotice() {
	    let localctx = new FieldReferenceInOtherNoticeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, EfxParser.RULE_fieldReferenceInOtherNotice);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 918;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===69) {
	            this.state = 915;
	            this.noticeReference();
	            this.state = 916;
	            this.match(EfxParser.Slash);
	        }

	        this.state = 920;
	        localctx.reference = this.fieldReferenceWithVariableContextOverride();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldReferenceWithVariableContextOverride() {
	    let localctx = new FieldReferenceWithVariableContextOverrideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, EfxParser.RULE_fieldReferenceWithVariableContextOverride);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 923;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===117) {
	            this.state = 922;
	            this.contextVariableSpecifier();
	        }

	        this.state = 925;
	        localctx.reference = this.fieldReferenceWithNodeContextOverride();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldReferenceWithNodeContextOverride() {
	    let localctx = new FieldReferenceWithNodeContextOverrideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, EfxParser.RULE_fieldReferenceWithNodeContextOverride);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 928;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        if(la_===1) {
	            this.state = 927;
	            this.contextNodeSpecifier();

	        }
	        this.state = 930;
	        localctx.reference = this.fieldReferenceWithFieldContextOverride();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldReferenceWithFieldContextOverride() {
	    let localctx = new FieldReferenceWithFieldContextOverrideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, EfxParser.RULE_fieldReferenceWithFieldContextOverride);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 933;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        if(la_===1) {
	            this.state = 932;
	            this.contextFieldSpecifier();

	        }
	        this.state = 935;
	        localctx.reference = this.fieldReferenceWithPredicate();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldContext() {
	    let localctx = new FieldContextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, EfxParser.RULE_fieldContext);
	    try {
	        this.state = 939;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 131:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 937;
	            this.absoluteFieldReference();
	            break;
	        case 79:
	        case 115:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 938;
	            this.fieldReferenceWithPredicate();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteFieldReference() {
	    let localctx = new AbsoluteFieldReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, EfxParser.RULE_absoluteFieldReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 941;
	        this.match(EfxParser.Slash);
	        this.state = 942;
	        localctx.reference = this.fieldReferenceWithPredicate();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldReferenceWithPredicate() {
	    let localctx = new FieldReferenceWithPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, EfxParser.RULE_fieldReferenceWithPredicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 944;
	        localctx.reference = this.fieldReferenceWithAxis();
	        this.state = 949;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        if(la_===1) {
	            this.state = 945;
	            this.match(EfxParser.OpenBracket);
	            this.state = 946;
	            this.predicate();
	            this.state = 947;
	            this.match(EfxParser.CloseBracket);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldReferenceWithAxis() {
	    let localctx = new FieldReferenceWithAxisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, EfxParser.RULE_fieldReferenceWithAxis);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 952;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===79) {
	            this.state = 951;
	            this.axis();
	        }

	        this.state = 954;
	        this.simpleFieldReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleFieldReference() {
	    let localctx = new SimpleFieldReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, EfxParser.RULE_simpleFieldReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 956;
	        this.match(EfxParser.FieldId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeReference() {
	    let localctx = new NodeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, EfxParser.RULE_nodeReference);
	    try {
	        this.state = 960;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 131:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 958;
	            this.absoluteNodeReference();
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 959;
	            this.nodeReferenceInOtherNotice();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeReferenceInOtherNotice() {
	    let localctx = new NodeReferenceInOtherNoticeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, EfxParser.RULE_nodeReferenceInOtherNotice);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 962;
	        this.noticeReference();
	        this.state = 963;
	        this.match(EfxParser.Slash);
	        this.state = 964;
	        this.nodeReferenceWithPredicate();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeContext() {
	    let localctx = new NodeContextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, EfxParser.RULE_nodeContext);
	    try {
	        this.state = 968;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 131:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 966;
	            this.absoluteNodeReference();
	            break;
	        case 116:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 967;
	            this.nodeReferenceWithPredicate();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteNodeReference() {
	    let localctx = new AbsoluteNodeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, EfxParser.RULE_absoluteNodeReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 970;
	        this.match(EfxParser.Slash);
	        this.state = 971;
	        this.nodeReferenceWithPredicate();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeReferenceWithPredicate() {
	    let localctx = new NodeReferenceWithPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, EfxParser.RULE_nodeReferenceWithPredicate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 973;
	        this.simpleNodeReference();
	        this.state = 978;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===45) {
	            this.state = 974;
	            this.match(EfxParser.OpenBracket);
	            this.state = 975;
	            this.predicate();
	            this.state = 976;
	            this.match(EfxParser.CloseBracket);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleNodeReference() {
	    let localctx = new SimpleNodeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, EfxParser.RULE_simpleNodeReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 980;
	        this.match(EfxParser.NodeId);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noticeReference() {
	    let localctx = new NoticeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, EfxParser.RULE_noticeReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 982;
	        this.match(EfxParser.Notice);
	        this.state = 983;
	        this.match(EfxParser.OpenParenthesis);
	        this.state = 984;
	        localctx.noticeId = this.stringExpression();
	        this.state = 985;
	        this.match(EfxParser.CloseParenthesis);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	codelistReference() {
	    let localctx = new CodelistReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, EfxParser.RULE_codelistReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 987;
	        this.match(EfxParser.OpenParenthesis);
	        this.state = 988;
	        localctx.codeListId = this.codelistId();
	        this.state = 989;
	        this.match(EfxParser.CloseParenthesis);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	codelistId() {
	    let localctx = new CodelistIdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, EfxParser.RULE_codelistId);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 991;
	        this.match(EfxParser.Identifier);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	axis() {
	    let localctx = new AxisContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, EfxParser.RULE_axis);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 993;
	        this.match(EfxParser.Axis);
	        this.state = 994;
	        this.match(EfxParser.ColonColon);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanFunction() {
	    let localctx = new BooleanFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, EfxParser.RULE_booleanFunction);
	    try {
	        this.state = 1029;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 91:
	            localctx = new NotFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 996;
	            this.match(EfxParser.Not);
	            this.state = 997;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 998;
	            this.booleanExpression(0);
	            this.state = 999;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 96:
	            localctx = new ContainsFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1001;
	            this.match(EfxParser.ContainsFunction);
	            this.state = 1002;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1003;
	            localctx.haystack = this.stringExpression();
	            this.state = 1004;
	            this.match(EfxParser.Comma);
	            this.state = 1005;
	            localctx.needle = this.stringExpression();
	            this.state = 1006;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 97:
	            localctx = new StartsWithFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1008;
	            this.match(EfxParser.StartsWithFunction);
	            this.state = 1009;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1010;
	            localctx.haystack = this.stringExpression();
	            this.state = 1011;
	            this.match(EfxParser.Comma);
	            this.state = 1012;
	            localctx.needle = this.stringExpression();
	            this.state = 1013;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 98:
	            localctx = new EndsWithFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1015;
	            this.match(EfxParser.EndsWithFunction);
	            this.state = 1016;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1017;
	            localctx.haystack = this.stringExpression();
	            this.state = 1018;
	            this.match(EfxParser.Comma);
	            this.state = 1019;
	            localctx.needle = this.stringExpression();
	            this.state = 1020;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 113:
	            localctx = new SequenceEqualFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1022;
	            this.match(EfxParser.SequenceEqualFunction);
	            this.state = 1023;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1024;
	            localctx.left = this.sequenceExpression();
	            this.state = 1025;
	            this.match(EfxParser.Comma);
	            this.state = 1026;
	            localctx.right = this.sequenceExpression();
	            this.state = 1027;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericFunction() {
	    let localctx = new NumericFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, EfxParser.RULE_numericFunction);
	    try {
	        this.state = 1051;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 92:
	            localctx = new CountFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1031;
	            this.match(EfxParser.CountFunction);
	            this.state = 1032;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1033;
	            this.sequenceExpression();
	            this.state = 1034;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 95:
	            localctx = new NumberFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1036;
	            this.match(EfxParser.NumberFunction);
	            this.state = 1037;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1038;
	            this.stringExpression();
	            this.state = 1039;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 100:
	            localctx = new SumFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1041;
	            this.match(EfxParser.SumFunction);
	            this.state = 1042;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1043;
	            this.numericSequence();
	            this.state = 1044;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 99:
	            localctx = new StringLengthFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1046;
	            this.match(EfxParser.StringLengthFunction);
	            this.state = 1047;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1048;
	            this.stringExpression();
	            this.state = 1049;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringFunction() {
	    let localctx = new StringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, EfxParser.RULE_stringFunction);
	    var _la = 0;
	    try {
	        this.state = 1090;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 93:
	            localctx = new SubstringFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1053;
	            this.match(EfxParser.SubstringFunction);
	            this.state = 1054;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1055;
	            this.stringExpression();
	            this.state = 1056;
	            this.match(EfxParser.Comma);
	            this.state = 1057;
	            localctx.start = this.numericExpression(0);
	            this.state = 1060;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===135) {
	                this.state = 1058;
	                this.match(EfxParser.Comma);
	                this.state = 1059;
	                localctx.length = this.numericExpression(0);
	            }

	            this.state = 1062;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 94:
	            localctx = new ToStringFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1064;
	            this.match(EfxParser.StringFunction);
	            this.state = 1065;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1066;
	            this.numericExpression(0);
	            this.state = 1067;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 102:
	            localctx = new ConcatFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1069;
	            this.match(EfxParser.ConcatFunction);
	            this.state = 1070;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1071;
	            this.stringExpression();
	            this.state = 1076;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===135) {
	                this.state = 1072;
	                this.match(EfxParser.Comma);
	                this.state = 1073;
	                this.stringExpression();
	                this.state = 1078;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1079;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 101:
	            localctx = new FormatNumberFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1081;
	            this.match(EfxParser.FormatNumberFunction);
	            this.state = 1082;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1083;
	            this.numericExpression(0);
	            this.state = 1086;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===135) {
	                this.state = 1084;
	                this.match(EfxParser.Comma);
	                this.state = 1085;
	                localctx.format = this.stringExpression();
	            }

	            this.state = 1088;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateFunction() {
	    let localctx = new DateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, EfxParser.RULE_dateFunction);
	    try {
	        this.state = 1111;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	            localctx = new DateFromStringFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1092;
	            this.match(EfxParser.DateFunction);
	            this.state = 1093;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1094;
	            this.stringExpression();
	            this.state = 1095;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 107:
	            localctx = new DatePlusMeasureFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1097;
	            this.match(EfxParser.AddMeasure);
	            this.state = 1098;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1099;
	            this.dateExpression();
	            this.state = 1100;
	            this.match(EfxParser.Comma);
	            this.state = 1101;
	            this.durationExpression(0);
	            this.state = 1102;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 108:
	            localctx = new DateMinusMeasureFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1104;
	            this.match(EfxParser.SubtractMeasure);
	            this.state = 1105;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1106;
	            this.dateExpression();
	            this.state = 1107;
	            this.match(EfxParser.Comma);
	            this.state = 1108;
	            this.durationExpression(0);
	            this.state = 1109;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeFunction() {
	    let localctx = new TimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, EfxParser.RULE_timeFunction);
	    try {
	        localctx = new TimeFromStringFunctionContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1113;
	        this.match(EfxParser.TimeFunction);
	        this.state = 1114;
	        this.match(EfxParser.OpenParenthesis);
	        this.state = 1115;
	        this.stringExpression();
	        this.state = 1116;
	        this.match(EfxParser.CloseParenthesis);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationFunction() {
	    let localctx = new DurationFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, EfxParser.RULE_durationFunction);
	    try {
	        this.state = 1128;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	            localctx = new DayTimeDurationFromStringFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1118;
	            this.match(EfxParser.DayTimeDurationFunction);
	            this.state = 1119;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1120;
	            this.stringExpression();
	            this.state = 1121;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 106:
	            localctx = new YearMonthDurationFromStringFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1123;
	            this.match(EfxParser.YearMonthDurationFunction);
	            this.state = 1124;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1125;
	            this.stringExpression();
	            this.state = 1126;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequenceFunction() {
	    let localctx = new SequenceFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, EfxParser.RULE_sequenceFunction);
	    try {
	        this.state = 1177;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	            localctx = new DistinctValuesFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1130;
	            this.match(EfxParser.DistinctValuesFunction);
	            this.state = 1131;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1134;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1132;
	                this.sequenceExpression();
	                break;

	            case 2:
	                this.state = 1133;
	                this.variableReference();
	                break;

	            }
	            this.state = 1136;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 110:
	            localctx = new UnionFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1138;
	            this.match(EfxParser.UnionFunction);
	            this.state = 1139;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1142;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1140;
	                this.sequenceExpression();
	                break;

	            case 2:
	                this.state = 1141;
	                this.variableReference();
	                break;

	            }
	            this.state = 1144;
	            this.match(EfxParser.Comma);
	            this.state = 1147;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1145;
	                this.sequenceExpression();
	                break;

	            case 2:
	                this.state = 1146;
	                this.variableReference();
	                break;

	            }
	            this.state = 1149;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 111:
	            localctx = new IntersectFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1151;
	            this.match(EfxParser.IntersectFunction);
	            this.state = 1152;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1155;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1153;
	                this.sequenceExpression();
	                break;

	            case 2:
	                this.state = 1154;
	                this.variableReference();
	                break;

	            }
	            this.state = 1157;
	            this.match(EfxParser.Comma);
	            this.state = 1160;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1158;
	                this.sequenceExpression();
	                break;

	            case 2:
	                this.state = 1159;
	                this.variableReference();
	                break;

	            }
	            this.state = 1162;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        case 112:
	            localctx = new ExceptFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1164;
	            this.match(EfxParser.ExceptFunction);
	            this.state = 1165;
	            this.match(EfxParser.OpenParenthesis);
	            this.state = 1168;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1166;
	                this.sequenceExpression();
	                break;

	            case 2:
	                this.state = 1167;
	                this.variableReference();
	                break;

	            }
	            this.state = 1170;
	            this.match(EfxParser.Comma);
	            this.state = 1173;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1171;
	                this.sequenceExpression();
	                break;

	            case 2:
	                this.state = 1172;
	                this.variableReference();
	                break;

	            }
	            this.state = 1175;
	            this.match(EfxParser.CloseParenthesis);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

EfxParser.EOF = antlr4.Token.EOF;
EfxParser.Comment = 1;
EfxParser.EmptyLine = 2;
EfxParser.MixedIndent = 3;
EfxParser.Tabs = 4;
EfxParser.Spaces = 5;
EfxParser.OutlineNumber = 6;
EfxParser.SWS = 7;
EfxParser.CRLF = 8;
EfxParser.FreeText = 9;
EfxParser.ShorthandFieldValueReferenceFromContextField = 10;
EfxParser.ShorthandIndirectLabelReferenceFromContextField = 11;
EfxParser.ValueKeyword = 12;
EfxParser.StartExpression = 13;
EfxParser.StartLabel = 14;
EfxParser.EndOfLineComment = 15;
EfxParser.Whitespace = 16;
EfxParser.Pipe = 17;
EfxParser.EndLabel = 18;
EfxParser.AssetType = 19;
EfxParser.ASSET_TYPE_BT = 20;
EfxParser.ASSET_TYPE_FIELD = 21;
EfxParser.ASSET_TYPE_NODE = 22;
EfxParser.ASSET_TYPE_DISPLAY_GROUP = 23;
EfxParser.ASSET_TYPE_VIEW_TEMPLATE = 24;
EfxParser.ASSET_TYPE_NOTICE = 25;
EfxParser.ASSET_TYPE_CODE_LIST = 26;
EfxParser.ASSET_TYPE_CODE = 27;
EfxParser.ASSET_TYPE_INDICATOR = 28;
EfxParser.ASSET_TYPE_AUXILIARY = 29;
EfxParser.ASSET_TYPE_RULE = 30;
EfxParser.ASSET_TYPE_EXPRESSION = 31;
EfxParser.ASSET_TYPE_INTERVAL = 32;
EfxParser.ASSET_TYPE_PATTERN = 33;
EfxParser.LabelType = 34;
EfxParser.LABEL_TYPE_NAME = 35;
EfxParser.LABEL_TYPE_WHEN_TRUE = 36;
EfxParser.LABEL_TYPE_WHEN_FALSE = 37;
EfxParser.LABEL_TYPE_DESCRIPTION = 38;
EfxParser.LABEL_TYPE_TOOLTIP = 39;
EfxParser.LABEL_TYPE_TEXT = 40;
EfxParser.LABEL_TYPE_TEMPLATE = 41;
EfxParser.OtherAssetId = 42;
EfxParser.OpenParenthesis = 43;
EfxParser.CloseParenthesis = 44;
EfxParser.OpenBracket = 45;
EfxParser.CloseBracket = 46;
EfxParser.ColonColon = 47;
EfxParser.EndExpression = 48;
EfxParser.And = 49;
EfxParser.Or = 50;
EfxParser.Is = 51;
EfxParser.In = 52;
EfxParser.Like = 53;
EfxParser.Present = 54;
EfxParser.Empty = 55;
EfxParser.Unique = 56;
EfxParser.Every = 57;
EfxParser.Some = 58;
EfxParser.Satisfies = 59;
EfxParser.If = 60;
EfxParser.Then = 61;
EfxParser.Else = 62;
EfxParser.For = 63;
EfxParser.Return = 64;
EfxParser.Always = 65;
EfxParser.Never = 66;
EfxParser.True = 67;
EfxParser.False = 68;
EfxParser.Notice = 69;
EfxParser.Codelist = 70;
EfxParser.BooleanTypeCast = 71;
EfxParser.NumericTypeCast = 72;
EfxParser.TextTypeCast = 73;
EfxParser.CodeTypeCast = 74;
EfxParser.DateTypeCast = 75;
EfxParser.TimeTypeCast = 76;
EfxParser.DurationTypeCast = 77;
EfxParser.ContextTypeCast = 78;
EfxParser.Axis = 79;
EfxParser.Preceding = 80;
EfxParser.Following = 81;
EfxParser.PrecedingSibling = 82;
EfxParser.FollowingSibling = 83;
EfxParser.Ancestor = 84;
EfxParser.AncestorOrSelf = 85;
EfxParser.Descendant = 86;
EfxParser.DescendantOrSelf = 87;
EfxParser.Child = 88;
EfxParser.Self = 89;
EfxParser.Parent = 90;
EfxParser.Not = 91;
EfxParser.CountFunction = 92;
EfxParser.SubstringFunction = 93;
EfxParser.StringFunction = 94;
EfxParser.NumberFunction = 95;
EfxParser.ContainsFunction = 96;
EfxParser.StartsWithFunction = 97;
EfxParser.EndsWithFunction = 98;
EfxParser.StringLengthFunction = 99;
EfxParser.SumFunction = 100;
EfxParser.FormatNumberFunction = 101;
EfxParser.ConcatFunction = 102;
EfxParser.DateFunction = 103;
EfxParser.TimeFunction = 104;
EfxParser.DayTimeDurationFunction = 105;
EfxParser.YearMonthDurationFunction = 106;
EfxParser.AddMeasure = 107;
EfxParser.SubtractMeasure = 108;
EfxParser.DistinctValuesFunction = 109;
EfxParser.UnionFunction = 110;
EfxParser.IntersectFunction = 111;
EfxParser.ExceptFunction = 112;
EfxParser.SequenceEqualFunction = 113;
EfxParser.BtId = 114;
EfxParser.FieldId = 115;
EfxParser.NodeId = 116;
EfxParser.Variable = 117;
EfxParser.DayTimeDurationLiteral = 118;
EfxParser.YearMonthDurationLiteral = 119;
EfxParser.Identifier = 120;
EfxParser.IdentifierPart = 121;
EfxParser.INTEGER = 122;
EfxParser.DECIMAL = 123;
EfxParser.STRING = 124;
EfxParser.UUIDV4 = 125;
EfxParser.DATE = 126;
EfxParser.TIME = 127;
EfxParser.ZONE = 128;
EfxParser.Comparison = 129;
EfxParser.Star = 130;
EfxParser.Slash = 131;
EfxParser.Percent = 132;
EfxParser.Plus = 133;
EfxParser.Minus = 134;
EfxParser.Comma = 135;
EfxParser.SlashAt = 136;
EfxParser.Colon = 137;
EfxParser.WS = 138;

EfxParser.RULE_singleExpression = 0;
EfxParser.RULE_templateFile = 1;
EfxParser.RULE_templateLine = 2;
EfxParser.RULE_template = 3;
EfxParser.RULE_templateFragment = 4;
EfxParser.RULE_textBlock = 5;
EfxParser.RULE_whitespace = 6;
EfxParser.RULE_labelBlock = 7;
EfxParser.RULE_assetType = 8;
EfxParser.RULE_labelType = 9;
EfxParser.RULE_assetId = 10;
EfxParser.RULE_otherAssetId = 11;
EfxParser.RULE_expressionBlock = 12;
EfxParser.RULE_contextDeclarationBlock = 13;
EfxParser.RULE_parameterList = 14;
EfxParser.RULE_parameterDeclaration = 15;
EfxParser.RULE_parameterValue = 16;
EfxParser.RULE_expression = 17;
EfxParser.RULE_lateBoundExpression = 18;
EfxParser.RULE_booleanExpression = 19;
EfxParser.RULE_stringExpression = 20;
EfxParser.RULE_numericExpression = 21;
EfxParser.RULE_dateExpression = 22;
EfxParser.RULE_timeExpression = 23;
EfxParser.RULE_durationExpression = 24;
EfxParser.RULE_sequenceExpression = 25;
EfxParser.RULE_stringSequence = 26;
EfxParser.RULE_stringSequenceFromIteration = 27;
EfxParser.RULE_booleanSequence = 28;
EfxParser.RULE_booleanSequenceFromIteration = 29;
EfxParser.RULE_numericSequence = 30;
EfxParser.RULE_numericSequenceFromIteration = 31;
EfxParser.RULE_dateSequence = 32;
EfxParser.RULE_dateSequenceFromIteration = 33;
EfxParser.RULE_timeSequence = 34;
EfxParser.RULE_timeSequenceFromIteration = 35;
EfxParser.RULE_durationSequence = 36;
EfxParser.RULE_durationSequenceFromIteration = 37;
EfxParser.RULE_predicate = 38;
EfxParser.RULE_iteratorList = 39;
EfxParser.RULE_iteratorExpression = 40;
EfxParser.RULE_stringIteratorExpression = 41;
EfxParser.RULE_booleanIteratorExpression = 42;
EfxParser.RULE_numericIteratorExpression = 43;
EfxParser.RULE_dateIteratorExpression = 44;
EfxParser.RULE_timeIteratorExpression = 45;
EfxParser.RULE_durationIteratorExpression = 46;
EfxParser.RULE_contextIteratorExpression = 47;
EfxParser.RULE_stringLiteral = 48;
EfxParser.RULE_numericLiteral = 49;
EfxParser.RULE_booleanLiteral = 50;
EfxParser.RULE_trueBooleanLiteral = 51;
EfxParser.RULE_falseBooleanLiteral = 52;
EfxParser.RULE_dateLiteral = 53;
EfxParser.RULE_timeLiteral = 54;
EfxParser.RULE_durationLiteral = 55;
EfxParser.RULE_stringVariableDeclaration = 56;
EfxParser.RULE_booleanVariableDeclaration = 57;
EfxParser.RULE_numericVariableDeclaration = 58;
EfxParser.RULE_dateVariableDeclaration = 59;
EfxParser.RULE_timeVariableDeclaration = 60;
EfxParser.RULE_durationVariableDeclaration = 61;
EfxParser.RULE_contextVariableDeclaration = 62;
EfxParser.RULE_variableReference = 63;
EfxParser.RULE_scalarFromReference = 64;
EfxParser.RULE_sequenceFromReference = 65;
EfxParser.RULE_pathFromReference = 66;
EfxParser.RULE_contextFieldSpecifier = 67;
EfxParser.RULE_contextNodeSpecifier = 68;
EfxParser.RULE_contextVariableSpecifier = 69;
EfxParser.RULE_attributeReference = 70;
EfxParser.RULE_fieldReference = 71;
EfxParser.RULE_fieldReferenceInOtherNotice = 72;
EfxParser.RULE_fieldReferenceWithVariableContextOverride = 73;
EfxParser.RULE_fieldReferenceWithNodeContextOverride = 74;
EfxParser.RULE_fieldReferenceWithFieldContextOverride = 75;
EfxParser.RULE_fieldContext = 76;
EfxParser.RULE_absoluteFieldReference = 77;
EfxParser.RULE_fieldReferenceWithPredicate = 78;
EfxParser.RULE_fieldReferenceWithAxis = 79;
EfxParser.RULE_simpleFieldReference = 80;
EfxParser.RULE_nodeReference = 81;
EfxParser.RULE_nodeReferenceInOtherNotice = 82;
EfxParser.RULE_nodeContext = 83;
EfxParser.RULE_absoluteNodeReference = 84;
EfxParser.RULE_nodeReferenceWithPredicate = 85;
EfxParser.RULE_simpleNodeReference = 86;
EfxParser.RULE_noticeReference = 87;
EfxParser.RULE_codelistReference = 88;
EfxParser.RULE_codelistId = 89;
EfxParser.RULE_axis = 90;
EfxParser.RULE_booleanFunction = 91;
EfxParser.RULE_numericFunction = 92;
EfxParser.RULE_stringFunction = 93;
EfxParser.RULE_dateFunction = 94;
EfxParser.RULE_timeFunction = 95;
EfxParser.RULE_durationFunction = 96;
EfxParser.RULE_sequenceFunction = 97;

class SingleExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_singleExpression;
    }

	StartExpression() {
	    return this.getToken(EfxParser.StartExpression, 0);
	};

	EndExpression() {
	    return this.getToken(EfxParser.EndExpression, 0);
	};

	expressionBlock() {
	    return this.getTypedRuleContext(ExpressionBlockContext,0);
	};

	EOF() {
	    return this.getToken(EfxParser.EOF, 0);
	};

	FieldId() {
	    return this.getToken(EfxParser.FieldId, 0);
	};

	NodeId() {
	    return this.getToken(EfxParser.NodeId, 0);
	};

	Comma() {
	    return this.getToken(EfxParser.Comma, 0);
	};

	parameterList() {
	    return this.getTypedRuleContext(ParameterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterSingleExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitSingleExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitSingleExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateFileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_templateFile;
    }

	EOF() {
	    return this.getToken(EfxParser.EOF, 0);
	};

	templateLine = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TemplateLineContext);
	    } else {
	        return this.getTypedRuleContext(TemplateLineContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTemplateFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTemplateFile(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTemplateFile(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateLineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_templateLine;
    }

	contextDeclarationBlock() {
	    return this.getTypedRuleContext(ContextDeclarationBlockContext,0);
	};

	template() {
	    return this.getTypedRuleContext(TemplateContext,0);
	};

	CRLF() {
	    return this.getToken(EfxParser.CRLF, 0);
	};

	OutlineNumber() {
	    return this.getToken(EfxParser.OutlineNumber, 0);
	};

	Tabs() {
	    return this.getToken(EfxParser.Tabs, 0);
	};

	Spaces() {
	    return this.getToken(EfxParser.Spaces, 0);
	};

	MixedIndent() {
	    return this.getToken(EfxParser.MixedIndent, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTemplateLine(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTemplateLine(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTemplateLine(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_template;
    }

	templateFragment() {
	    return this.getTypedRuleContext(TemplateFragmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTemplate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTemplate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemplateFragmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_templateFragment;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExpressionTemplateContext extends TemplateFragmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionBlock() {
	    return this.getTypedRuleContext(ExpressionBlockContext,0);
	};

	templateFragment() {
	    return this.getTypedRuleContext(TemplateFragmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterExpressionTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitExpressionTemplate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitExpressionTemplate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ExpressionTemplateContext = ExpressionTemplateContext;

class TextTemplateContext extends TemplateFragmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	textBlock() {
	    return this.getTypedRuleContext(TextBlockContext,0);
	};

	templateFragment() {
	    return this.getTypedRuleContext(TemplateFragmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTextTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTextTemplate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTextTemplate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.TextTemplateContext = TextTemplateContext;

class LabelTemplateContext extends TemplateFragmentContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	labelBlock() {
	    return this.getTypedRuleContext(LabelBlockContext,0);
	};

	templateFragment() {
	    return this.getTypedRuleContext(TemplateFragmentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterLabelTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitLabelTemplate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitLabelTemplate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.LabelTemplateContext = LabelTemplateContext;

class TextBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_textBlock;
    }

	whitespace() {
	    return this.getTypedRuleContext(WhitespaceContext,0);
	};

	FreeText = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EfxParser.FreeText);
	    } else {
	        return this.getToken(EfxParser.FreeText, i);
	    }
	};


	textBlock = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TextBlockContext);
	    } else {
	        return this.getTypedRuleContext(TextBlockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTextBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTextBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTextBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhitespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_whitespace;
    }

	Whitespace = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EfxParser.Whitespace);
	    } else {
	        return this.getToken(EfxParser.Whitespace, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterWhitespace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitWhitespace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitWhitespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_labelBlock;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ShorthandBtLabelReferenceContext extends LabelBlockContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	StartLabel() {
	    return this.getToken(EfxParser.StartLabel, 0);
	};

	labelType() {
	    return this.getTypedRuleContext(LabelTypeContext,0);
	};

	Pipe() {
	    return this.getToken(EfxParser.Pipe, 0);
	};

	BtId() {
	    return this.getToken(EfxParser.BtId, 0);
	};

	EndLabel() {
	    return this.getToken(EfxParser.EndLabel, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterShorthandBtLabelReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitShorthandBtLabelReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitShorthandBtLabelReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ShorthandBtLabelReferenceContext = ShorthandBtLabelReferenceContext;

class StandardLabelReferenceContext extends LabelBlockContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	StartLabel() {
	    return this.getToken(EfxParser.StartLabel, 0);
	};

	assetType() {
	    return this.getTypedRuleContext(AssetTypeContext,0);
	};

	Pipe = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EfxParser.Pipe);
	    } else {
	        return this.getToken(EfxParser.Pipe, i);
	    }
	};


	labelType() {
	    return this.getTypedRuleContext(LabelTypeContext,0);
	};

	assetId() {
	    return this.getTypedRuleContext(AssetIdContext,0);
	};

	EndLabel() {
	    return this.getToken(EfxParser.EndLabel, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStandardLabelReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStandardLabelReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStandardLabelReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.StandardLabelReferenceContext = StandardLabelReferenceContext;

class ShorthandIndirectLabelReferenceContext extends LabelBlockContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	StartLabel() {
	    return this.getToken(EfxParser.StartLabel, 0);
	};

	FieldId() {
	    return this.getToken(EfxParser.FieldId, 0);
	};

	EndLabel() {
	    return this.getToken(EfxParser.EndLabel, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterShorthandIndirectLabelReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitShorthandIndirectLabelReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitShorthandIndirectLabelReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ShorthandIndirectLabelReferenceContext = ShorthandIndirectLabelReferenceContext;

class ShorthandLabelReferenceFromContextContext extends LabelBlockContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	StartLabel() {
	    return this.getToken(EfxParser.StartLabel, 0);
	};

	LabelType() {
	    return this.getToken(EfxParser.LabelType, 0);
	};

	EndLabel() {
	    return this.getToken(EfxParser.EndLabel, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterShorthandLabelReferenceFromContext(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitShorthandLabelReferenceFromContext(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitShorthandLabelReferenceFromContext(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ShorthandLabelReferenceFromContextContext = ShorthandLabelReferenceFromContextContext;

class ShorthandIndirectLabelReferenceFromContextFieldContext extends LabelBlockContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ShorthandIndirectLabelReferenceFromContextField() {
	    return this.getToken(EfxParser.ShorthandIndirectLabelReferenceFromContextField, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterShorthandIndirectLabelReferenceFromContextField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitShorthandIndirectLabelReferenceFromContextField(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitShorthandIndirectLabelReferenceFromContextField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ShorthandIndirectLabelReferenceFromContextFieldContext = ShorthandIndirectLabelReferenceFromContextFieldContext;

class ShorthandFieldLabelReferenceContext extends LabelBlockContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	StartLabel() {
	    return this.getToken(EfxParser.StartLabel, 0);
	};

	labelType() {
	    return this.getTypedRuleContext(LabelTypeContext,0);
	};

	Pipe() {
	    return this.getToken(EfxParser.Pipe, 0);
	};

	FieldId() {
	    return this.getToken(EfxParser.FieldId, 0);
	};

	EndLabel() {
	    return this.getToken(EfxParser.EndLabel, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterShorthandFieldLabelReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitShorthandFieldLabelReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitShorthandFieldLabelReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ShorthandFieldLabelReferenceContext = ShorthandFieldLabelReferenceContext;

class AssetTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_assetType;
    }

	AssetType() {
	    return this.getToken(EfxParser.AssetType, 0);
	};

	expressionBlock() {
	    return this.getTypedRuleContext(ExpressionBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterAssetType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitAssetType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitAssetType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_labelType;
    }

	LabelType() {
	    return this.getToken(EfxParser.LabelType, 0);
	};

	expressionBlock() {
	    return this.getTypedRuleContext(ExpressionBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterLabelType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitLabelType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitLabelType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssetIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_assetId;
    }

	BtId() {
	    return this.getToken(EfxParser.BtId, 0);
	};

	FieldId() {
	    return this.getToken(EfxParser.FieldId, 0);
	};

	otherAssetId() {
	    return this.getTypedRuleContext(OtherAssetIdContext,0);
	};

	expressionBlock() {
	    return this.getTypedRuleContext(ExpressionBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterAssetId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitAssetId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitAssetId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OtherAssetIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_otherAssetId;
    }

	OtherAssetId() {
	    return this.getToken(EfxParser.OtherAssetId, 0);
	};

	AssetType() {
	    return this.getToken(EfxParser.AssetType, 0);
	};

	LabelType() {
	    return this.getToken(EfxParser.LabelType, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterOtherAssetId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitOtherAssetId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitOtherAssetId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_expressionBlock;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ShorthandFieldValueReferenceFromContextFieldContext extends ExpressionBlockContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ShorthandFieldValueReferenceFromContextField() {
	    return this.getToken(EfxParser.ShorthandFieldValueReferenceFromContextField, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterShorthandFieldValueReferenceFromContextField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitShorthandFieldValueReferenceFromContextField(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitShorthandFieldValueReferenceFromContextField(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ShorthandFieldValueReferenceFromContextFieldContext = ShorthandFieldValueReferenceFromContextFieldContext;

class StandardExpressionBlockContext extends ExpressionBlockContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	StartExpression() {
	    return this.getToken(EfxParser.StartExpression, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	EndExpression() {
	    return this.getToken(EfxParser.EndExpression, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStandardExpressionBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStandardExpressionBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStandardExpressionBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.StandardExpressionBlockContext = StandardExpressionBlockContext;

class ContextDeclarationBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_contextDeclarationBlock;
    }

	StartExpression() {
	    return this.getToken(EfxParser.StartExpression, 0);
	};

	fieldContext() {
	    return this.getTypedRuleContext(FieldContextContext,0);
	};

	EndExpression() {
	    return this.getToken(EfxParser.EndExpression, 0);
	};

	nodeContext() {
	    return this.getTypedRuleContext(NodeContextContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterContextDeclarationBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitContextDeclarationBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitContextDeclarationBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_parameterList;
    }

	parameterDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(ParameterDeclarationContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EfxParser.Comma);
	    } else {
	        return this.getToken(EfxParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterParameterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitParameterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitParameterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_parameterDeclaration;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class NumericParameterDeclarationContext extends ParameterDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NumericTypeCast() {
	    return this.getToken(EfxParser.NumericTypeCast, 0);
	};

	Variable() {
	    return this.getToken(EfxParser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNumericParameterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNumericParameterDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNumericParameterDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.NumericParameterDeclarationContext = NumericParameterDeclarationContext;

class DateParameterDeclarationContext extends ParameterDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateTypeCast() {
	    return this.getToken(EfxParser.DateTypeCast, 0);
	};

	Variable() {
	    return this.getToken(EfxParser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateParameterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateParameterDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateParameterDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DateParameterDeclarationContext = DateParameterDeclarationContext;

class BooleanParameterDeclarationContext extends ParameterDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BooleanTypeCast() {
	    return this.getToken(EfxParser.BooleanTypeCast, 0);
	};

	Variable() {
	    return this.getToken(EfxParser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterBooleanParameterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitBooleanParameterDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitBooleanParameterDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.BooleanParameterDeclarationContext = BooleanParameterDeclarationContext;

class TimeParameterDeclarationContext extends ParameterDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TimeTypeCast() {
	    return this.getToken(EfxParser.TimeTypeCast, 0);
	};

	Variable() {
	    return this.getToken(EfxParser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTimeParameterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTimeParameterDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTimeParameterDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.TimeParameterDeclarationContext = TimeParameterDeclarationContext;

class DurationParameterDeclarationContext extends ParameterDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DurationTypeCast() {
	    return this.getToken(EfxParser.DurationTypeCast, 0);
	};

	Variable() {
	    return this.getToken(EfxParser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationParameterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationParameterDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationParameterDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DurationParameterDeclarationContext = DurationParameterDeclarationContext;

class StringParameterDeclarationContext extends ParameterDeclarationContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TextTypeCast() {
	    return this.getToken(EfxParser.TextTypeCast, 0);
	};

	Variable() {
	    return this.getToken(EfxParser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStringParameterDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStringParameterDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStringParameterDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.StringParameterDeclarationContext = StringParameterDeclarationContext;

class ParameterValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_parameterValue;
    }

	StartExpression() {
	    return this.getToken(EfxParser.StartExpression, 0);
	};

	EndExpression() {
	    return this.getToken(EfxParser.EndExpression, 0);
	};

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	dateLiteral() {
	    return this.getTypedRuleContext(DateLiteralContext,0);
	};

	timeLiteral() {
	    return this.getTypedRuleContext(TimeLiteralContext,0);
	};

	durationLiteral() {
	    return this.getTypedRuleContext(DurationLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterParameterValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitParameterValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitParameterValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_expression;
    }

	lateBoundExpression() {
	    return this.getTypedRuleContext(LateBoundExpressionContext,0);
	};

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	stringExpression() {
	    return this.getTypedRuleContext(StringExpressionContext,0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	dateExpression() {
	    return this.getTypedRuleContext(DateExpressionContext,0);
	};

	timeExpression() {
	    return this.getTypedRuleContext(TimeExpressionContext,0);
	};

	durationExpression() {
	    return this.getTypedRuleContext(DurationExpressionContext,0);
	};

	sequenceExpression() {
	    return this.getTypedRuleContext(SequenceExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LateBoundExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_lateBoundExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UntypedFieldReferenceExpressionContext extends LateBoundExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	scalarFromReference() {
	    return this.getTypedRuleContext(ScalarFromReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterUntypedFieldReferenceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitUntypedFieldReferenceExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitUntypedFieldReferenceExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.UntypedFieldReferenceExpressionContext = UntypedFieldReferenceExpressionContext;

class UntypedVariableExpressionContext extends LateBoundExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	variableReference() {
	    return this.getTypedRuleContext(VariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterUntypedVariableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitUntypedVariableExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitUntypedVariableExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.UntypedVariableExpressionContext = UntypedVariableExpressionContext;

class UntypedConditionalExpressionContext extends LateBoundExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	If() {
	    return this.getToken(EfxParser.If, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	Then() {
	    return this.getToken(EfxParser.Then, 0);
	};

	lateBoundExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LateBoundExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LateBoundExpressionContext,i);
	    }
	};

	Else() {
	    return this.getToken(EfxParser.Else, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterUntypedConditionalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitUntypedConditionalExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitUntypedConditionalExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.UntypedConditionalExpressionContext = UntypedConditionalExpressionContext;

class UntypedSequenceExpressionContext extends LateBoundExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	sequenceFromReference() {
	    return this.getTypedRuleContext(SequenceFromReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterUntypedSequenceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitUntypedSequenceExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitUntypedSequenceExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.UntypedSequenceExpressionContext = UntypedSequenceExpressionContext;

class BooleanExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_booleanExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DurationComparisonContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	durationExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DurationExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DurationExpressionContext,i);
	    }
	};

	Comparison() {
	    return this.getToken(EfxParser.Comparison, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationComparison(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationComparison(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DurationComparisonContext = DurationComparisonContext;

class ConditionalBooleanExpressionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	If() {
	    return this.getToken(EfxParser.If, 0);
	};

	booleanExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BooleanExpressionContext,i);
	    }
	};

	Then() {
	    return this.getToken(EfxParser.Then, 0);
	};

	Else() {
	    return this.getToken(EfxParser.Else, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterConditionalBooleanExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitConditionalBooleanExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitConditionalBooleanExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ConditionalBooleanExpressionContext = ConditionalBooleanExpressionContext;

class TimeInListConditionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.modifier = null;;
        super.copyFrom(ctx);
    }

	timeExpression() {
	    return this.getTypedRuleContext(TimeExpressionContext,0);
	};

	In() {
	    return this.getToken(EfxParser.In, 0);
	};

	timeSequence() {
	    return this.getTypedRuleContext(TimeSequenceContext,0);
	};

	Not() {
	    return this.getToken(EfxParser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTimeInListCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTimeInListCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTimeInListCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.TimeInListConditionContext = TimeInListConditionContext;

class BooleanFunctionExpressionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	booleanFunction() {
	    return this.getTypedRuleContext(BooleanFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterBooleanFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitBooleanFunctionExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitBooleanFunctionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.BooleanFunctionExpressionContext = BooleanFunctionExpressionContext;

class DurationInListConditionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.modifier = null;;
        super.copyFrom(ctx);
    }

	durationExpression() {
	    return this.getTypedRuleContext(DurationExpressionContext,0);
	};

	In() {
	    return this.getToken(EfxParser.In, 0);
	};

	durationSequence() {
	    return this.getTypedRuleContext(DurationSequenceContext,0);
	};

	Not() {
	    return this.getToken(EfxParser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationInListCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationInListCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationInListCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DurationInListConditionContext = DurationInListConditionContext;

class StringInListConditionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.modifier = null;;
        super.copyFrom(ctx);
    }

	stringExpression() {
	    return this.getTypedRuleContext(StringExpressionContext,0);
	};

	In() {
	    return this.getToken(EfxParser.In, 0);
	};

	stringSequence() {
	    return this.getTypedRuleContext(StringSequenceContext,0);
	};

	Not() {
	    return this.getToken(EfxParser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStringInListCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStringInListCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStringInListCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.StringInListConditionContext = StringInListConditionContext;

class LogicalAndConditionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	booleanExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BooleanExpressionContext,i);
	    }
	};

	And() {
	    return this.getToken(EfxParser.And, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterLogicalAndCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitLogicalAndCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitLogicalAndCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.LogicalAndConditionContext = LogicalAndConditionContext;

class BooleanLiteralExpressionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterBooleanLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitBooleanLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitBooleanLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.BooleanLiteralExpressionContext = BooleanLiteralExpressionContext;

class NumericComparisonContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	numericExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NumericExpressionContext,i);
	    }
	};

	Comparison() {
	    return this.getToken(EfxParser.Comparison, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNumericComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNumericComparison(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNumericComparison(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.NumericComparisonContext = NumericComparisonContext;

class LogicalOrConditionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	booleanExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BooleanExpressionContext,i);
	    }
	};

	Or() {
	    return this.getToken(EfxParser.Or, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterLogicalOrCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitLogicalOrCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitLogicalOrCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.LogicalOrConditionContext = LogicalOrConditionContext;

class UntypedBooleanExpressionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	lateBoundExpression() {
	    return this.getTypedRuleContext(LateBoundExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterUntypedBooleanExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitUntypedBooleanExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitUntypedBooleanExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.UntypedBooleanExpressionContext = UntypedBooleanExpressionContext;

class ParenthesizedBooleanExpressionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterParenthesizedBooleanExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitParenthesizedBooleanExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitParenthesizedBooleanExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ParenthesizedBooleanExpressionContext = ParenthesizedBooleanExpressionContext;

class BooleanInListConditionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.modifier = null;;
        super.copyFrom(ctx);
    }

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	In() {
	    return this.getToken(EfxParser.In, 0);
	};

	booleanSequence() {
	    return this.getTypedRuleContext(BooleanSequenceContext,0);
	};

	Not() {
	    return this.getToken(EfxParser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterBooleanInListCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitBooleanInListCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitBooleanInListCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.BooleanInListConditionContext = BooleanInListConditionContext;

class BooleanCastExpressionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BooleanTypeCast() {
	    return this.getToken(EfxParser.BooleanTypeCast, 0);
	};

	lateBoundExpression() {
	    return this.getTypedRuleContext(LateBoundExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterBooleanCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitBooleanCastExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitBooleanCastExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.BooleanCastExpressionContext = BooleanCastExpressionContext;

class QuantifiedExpressionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	iteratorList() {
	    return this.getTypedRuleContext(IteratorListContext,0);
	};

	Satisfies() {
	    return this.getToken(EfxParser.Satisfies, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	Every() {
	    return this.getToken(EfxParser.Every, 0);
	};

	Some() {
	    return this.getToken(EfxParser.Some, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterQuantifiedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitQuantifiedExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitQuantifiedExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.QuantifiedExpressionContext = QuantifiedExpressionContext;

class TimeComparisonContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	timeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TimeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(TimeExpressionContext,i);
	    }
	};

	Comparison() {
	    return this.getToken(EfxParser.Comparison, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTimeComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTimeComparison(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTimeComparison(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.TimeComparisonContext = TimeComparisonContext;

class NumberInListConditionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.modifier = null;;
        super.copyFrom(ctx);
    }

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	In() {
	    return this.getToken(EfxParser.In, 0);
	};

	numericSequence() {
	    return this.getTypedRuleContext(NumericSequenceContext,0);
	};

	Not() {
	    return this.getToken(EfxParser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNumberInListCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNumberInListCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNumberInListCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.NumberInListConditionContext = NumberInListConditionContext;

class PresenceConditionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.modifier = null;;
        super.copyFrom(ctx);
    }

	pathFromReference() {
	    return this.getTypedRuleContext(PathFromReferenceContext,0);
	};

	Is() {
	    return this.getToken(EfxParser.Is, 0);
	};

	Present() {
	    return this.getToken(EfxParser.Present, 0);
	};

	Not() {
	    return this.getToken(EfxParser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterPresenceCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitPresenceCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitPresenceCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.PresenceConditionContext = PresenceConditionContext;

class EmptinessConditionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.modifier = null;;
        super.copyFrom(ctx);
    }

	stringExpression() {
	    return this.getTypedRuleContext(StringExpressionContext,0);
	};

	Is() {
	    return this.getToken(EfxParser.Is, 0);
	};

	Empty() {
	    return this.getToken(EfxParser.Empty, 0);
	};

	Not() {
	    return this.getToken(EfxParser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterEmptinessCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitEmptinessCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitEmptinessCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.EmptinessConditionContext = EmptinessConditionContext;

class DateComparisonContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	dateExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DateExpressionContext,i);
	    }
	};

	Comparison() {
	    return this.getToken(EfxParser.Comparison, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateComparison(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateComparison(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DateComparisonContext = DateComparisonContext;

class BooleanComparisonContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	booleanExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BooleanExpressionContext,i);
	    }
	};

	Comparison() {
	    return this.getToken(EfxParser.Comparison, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterBooleanComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitBooleanComparison(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitBooleanComparison(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.BooleanComparisonContext = BooleanComparisonContext;

class StringComparisonContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	stringExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringExpressionContext);
	    } else {
	        return this.getTypedRuleContext(StringExpressionContext,i);
	    }
	};

	Comparison() {
	    return this.getToken(EfxParser.Comparison, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStringComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStringComparison(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStringComparison(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.StringComparisonContext = StringComparisonContext;

class DateInListConditionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.modifier = null;;
        super.copyFrom(ctx);
    }

	dateExpression() {
	    return this.getTypedRuleContext(DateExpressionContext,0);
	};

	In() {
	    return this.getToken(EfxParser.In, 0);
	};

	dateSequence() {
	    return this.getTypedRuleContext(DateSequenceContext,0);
	};

	Not() {
	    return this.getToken(EfxParser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateInListCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateInListCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateInListCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DateInListConditionContext = DateInListConditionContext;

class LikePatternConditionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.modifier = null;;
        this.pattern = null;;
        super.copyFrom(ctx);
    }

	stringExpression() {
	    return this.getTypedRuleContext(StringExpressionContext,0);
	};

	Like() {
	    return this.getToken(EfxParser.Like, 0);
	};

	STRING() {
	    return this.getToken(EfxParser.STRING, 0);
	};

	Not() {
	    return this.getToken(EfxParser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterLikePatternCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitLikePatternCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitLikePatternCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.LikePatternConditionContext = LikePatternConditionContext;

class UniqueValueConditionContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.modifier = null;;
        super.copyFrom(ctx);
    }

	pathFromReference() {
	    return this.getTypedRuleContext(PathFromReferenceContext,0);
	};

	Is() {
	    return this.getToken(EfxParser.Is, 0);
	};

	Unique() {
	    return this.getToken(EfxParser.Unique, 0);
	};

	In() {
	    return this.getToken(EfxParser.In, 0);
	};

	absoluteFieldReference() {
	    return this.getTypedRuleContext(AbsoluteFieldReferenceContext,0);
	};

	Not() {
	    return this.getToken(EfxParser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterUniqueValueCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitUniqueValueCondition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitUniqueValueCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.UniqueValueConditionContext = UniqueValueConditionContext;

class FieldValueComparisonContext extends BooleanExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	lateBoundExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LateBoundExpressionContext);
	    } else {
	        return this.getTypedRuleContext(LateBoundExpressionContext,i);
	    }
	};

	Comparison() {
	    return this.getToken(EfxParser.Comparison, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterFieldValueComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitFieldValueComparison(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitFieldValueComparison(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.FieldValueComparisonContext = FieldValueComparisonContext;

class StringExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_stringExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ConditionalStringExpressionContext extends StringExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	If() {
	    return this.getToken(EfxParser.If, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	Then() {
	    return this.getToken(EfxParser.Then, 0);
	};

	stringExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringExpressionContext);
	    } else {
	        return this.getTypedRuleContext(StringExpressionContext,i);
	    }
	};

	Else() {
	    return this.getToken(EfxParser.Else, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterConditionalStringExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitConditionalStringExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitConditionalStringExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ConditionalStringExpressionContext = ConditionalStringExpressionContext;

class StringLiteralExpressionContext extends StringExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	stringLiteral() {
	    return this.getTypedRuleContext(StringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStringLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStringLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStringLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.StringLiteralExpressionContext = StringLiteralExpressionContext;

class StringFunctionExpressionContext extends StringExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	stringFunction() {
	    return this.getTypedRuleContext(StringFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStringFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStringFunctionExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStringFunctionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.StringFunctionExpressionContext = StringFunctionExpressionContext;

class StringCastExpressionContext extends StringExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TextTypeCast() {
	    return this.getToken(EfxParser.TextTypeCast, 0);
	};

	lateBoundExpression() {
	    return this.getTypedRuleContext(LateBoundExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStringCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStringCastExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStringCastExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.StringCastExpressionContext = StringCastExpressionContext;

class UntypedStringExpressionContext extends StringExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	lateBoundExpression() {
	    return this.getTypedRuleContext(LateBoundExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterUntypedStringExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitUntypedStringExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitUntypedStringExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.UntypedStringExpressionContext = UntypedStringExpressionContext;

class NumericExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_numericExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ParenthesizedNumericExpressionContext extends NumericExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterParenthesizedNumericExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitParenthesizedNumericExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitParenthesizedNumericExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ParenthesizedNumericExpressionContext = ParenthesizedNumericExpressionContext;

class NumericFunctionExpressionContext extends NumericExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	numericFunction() {
	    return this.getTypedRuleContext(NumericFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNumericFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNumericFunctionExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNumericFunctionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.NumericFunctionExpressionContext = NumericFunctionExpressionContext;

class AdditionExpressionContext extends NumericExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	numericExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NumericExpressionContext,i);
	    }
	};

	Plus() {
	    return this.getToken(EfxParser.Plus, 0);
	};

	Minus() {
	    return this.getToken(EfxParser.Minus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterAdditionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitAdditionExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitAdditionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.AdditionExpressionContext = AdditionExpressionContext;

class NumericLiteralExpressionContext extends NumericExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNumericLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNumericLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNumericLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.NumericLiteralExpressionContext = NumericLiteralExpressionContext;

class ConditionalNumericExpressionContext extends NumericExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	If() {
	    return this.getToken(EfxParser.If, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	Then() {
	    return this.getToken(EfxParser.Then, 0);
	};

	numericExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NumericExpressionContext,i);
	    }
	};

	Else() {
	    return this.getToken(EfxParser.Else, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterConditionalNumericExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitConditionalNumericExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitConditionalNumericExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ConditionalNumericExpressionContext = ConditionalNumericExpressionContext;

class MultiplicationExpressionContext extends NumericExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.operator = null;;
        super.copyFrom(ctx);
    }

	numericExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NumericExpressionContext,i);
	    }
	};

	Star() {
	    return this.getToken(EfxParser.Star, 0);
	};

	Slash() {
	    return this.getToken(EfxParser.Slash, 0);
	};

	Percent() {
	    return this.getToken(EfxParser.Percent, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterMultiplicationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitMultiplicationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitMultiplicationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.MultiplicationExpressionContext = MultiplicationExpressionContext;

class NumericCastExpressionContext extends NumericExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NumericTypeCast() {
	    return this.getToken(EfxParser.NumericTypeCast, 0);
	};

	lateBoundExpression() {
	    return this.getTypedRuleContext(LateBoundExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNumericCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNumericCastExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNumericCastExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.NumericCastExpressionContext = NumericCastExpressionContext;

class UntypedNumericExpressionContext extends NumericExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	lateBoundExpression() {
	    return this.getTypedRuleContext(LateBoundExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterUntypedNumericExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitUntypedNumericExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitUntypedNumericExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.UntypedNumericExpressionContext = UntypedNumericExpressionContext;

class DateExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_dateExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class UntypedDateExpressionContext extends DateExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	lateBoundExpression() {
	    return this.getTypedRuleContext(LateBoundExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterUntypedDateExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitUntypedDateExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitUntypedDateExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.UntypedDateExpressionContext = UntypedDateExpressionContext;

class ConditionalDateExpressionContext extends DateExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	If() {
	    return this.getToken(EfxParser.If, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	Then() {
	    return this.getToken(EfxParser.Then, 0);
	};

	dateExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DateExpressionContext,i);
	    }
	};

	Else() {
	    return this.getToken(EfxParser.Else, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterConditionalDateExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitConditionalDateExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitConditionalDateExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ConditionalDateExpressionContext = ConditionalDateExpressionContext;

class DateCastExpressionContext extends DateExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateTypeCast() {
	    return this.getToken(EfxParser.DateTypeCast, 0);
	};

	lateBoundExpression() {
	    return this.getTypedRuleContext(LateBoundExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateCastExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateCastExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DateCastExpressionContext = DateCastExpressionContext;

class DateLiteralExpressionContext extends DateExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	dateLiteral() {
	    return this.getTypedRuleContext(DateLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DateLiteralExpressionContext = DateLiteralExpressionContext;

class DateFunctionExpressionContext extends DateExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	dateFunction() {
	    return this.getTypedRuleContext(DateFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateFunctionExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateFunctionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DateFunctionExpressionContext = DateFunctionExpressionContext;

class TimeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_timeExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TimeLiteralExpressionContext extends TimeExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	timeLiteral() {
	    return this.getTypedRuleContext(TimeLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTimeLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTimeLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTimeLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.TimeLiteralExpressionContext = TimeLiteralExpressionContext;

class TimeFunctionExpressionContext extends TimeExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	timeFunction() {
	    return this.getTypedRuleContext(TimeFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTimeFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTimeFunctionExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTimeFunctionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.TimeFunctionExpressionContext = TimeFunctionExpressionContext;

class ConditionalTimeExpressionContext extends TimeExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	If() {
	    return this.getToken(EfxParser.If, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	Then() {
	    return this.getToken(EfxParser.Then, 0);
	};

	timeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TimeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(TimeExpressionContext,i);
	    }
	};

	Else() {
	    return this.getToken(EfxParser.Else, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterConditionalTimeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitConditionalTimeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitConditionalTimeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ConditionalTimeExpressionContext = ConditionalTimeExpressionContext;

class UntypedTimeExpressionContext extends TimeExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	lateBoundExpression() {
	    return this.getTypedRuleContext(LateBoundExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterUntypedTimeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitUntypedTimeExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitUntypedTimeExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.UntypedTimeExpressionContext = UntypedTimeExpressionContext;

class TimeCastExpressionContext extends TimeExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TimeTypeCast() {
	    return this.getToken(EfxParser.TimeTypeCast, 0);
	};

	lateBoundExpression() {
	    return this.getTypedRuleContext(LateBoundExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTimeCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTimeCastExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTimeCastExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.TimeCastExpressionContext = TimeCastExpressionContext;

class DurationExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_durationExpression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ParenthesizedDurationExpressionContext extends DurationExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	durationExpression() {
	    return this.getTypedRuleContext(DurationExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterParenthesizedDurationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitParenthesizedDurationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitParenthesizedDurationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ParenthesizedDurationExpressionContext = ParenthesizedDurationExpressionContext;

class DurationSubtractionExpressionContext extends DurationExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	durationExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DurationExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DurationExpressionContext,i);
	    }
	};

	Minus() {
	    return this.getToken(EfxParser.Minus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationSubtractionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationSubtractionExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationSubtractionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DurationSubtractionExpressionContext = DurationSubtractionExpressionContext;

class DateSubtractionExpressionContext extends DurationExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.endDate = null;;
        this.startDate = null;;
        super.copyFrom(ctx);
    }

	Minus() {
	    return this.getToken(EfxParser.Minus, 0);
	};

	dateExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DateExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateSubtractionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateSubtractionExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateSubtractionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DateSubtractionExpressionContext = DateSubtractionExpressionContext;

class ConditionalDurationExpressionContext extends DurationExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	If() {
	    return this.getToken(EfxParser.If, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	Then() {
	    return this.getToken(EfxParser.Then, 0);
	};

	durationExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DurationExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DurationExpressionContext,i);
	    }
	};

	Else() {
	    return this.getToken(EfxParser.Else, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterConditionalDurationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitConditionalDurationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitConditionalDurationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ConditionalDurationExpressionContext = ConditionalDurationExpressionContext;

class DurationCastExpressionContext extends DurationExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DurationTypeCast() {
	    return this.getToken(EfxParser.DurationTypeCast, 0);
	};

	lateBoundExpression() {
	    return this.getTypedRuleContext(LateBoundExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationCastExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationCastExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationCastExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DurationCastExpressionContext = DurationCastExpressionContext;

class DurationLiteralExpressionContext extends DurationExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	durationLiteral() {
	    return this.getTypedRuleContext(DurationLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationLiteralExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationLiteralExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DurationLiteralExpressionContext = DurationLiteralExpressionContext;

class DurationAdditionExpressionContext extends DurationExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	durationExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DurationExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DurationExpressionContext,i);
	    }
	};

	Plus() {
	    return this.getToken(EfxParser.Plus, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationAdditionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationAdditionExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationAdditionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DurationAdditionExpressionContext = DurationAdditionExpressionContext;

class DurationFunctionExpressionContext extends DurationExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	durationFunction() {
	    return this.getTypedRuleContext(DurationFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationFunctionExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationFunctionExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DurationFunctionExpressionContext = DurationFunctionExpressionContext;

class DurationRightMultiplicationExpressionContext extends DurationExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	durationExpression() {
	    return this.getTypedRuleContext(DurationExpressionContext,0);
	};

	Star() {
	    return this.getToken(EfxParser.Star, 0);
	};

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationRightMultiplicationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationRightMultiplicationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationRightMultiplicationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DurationRightMultiplicationExpressionContext = DurationRightMultiplicationExpressionContext;

class DurationLeftMultiplicationExpressionContext extends DurationExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	Star() {
	    return this.getToken(EfxParser.Star, 0);
	};

	durationExpression() {
	    return this.getTypedRuleContext(DurationExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationLeftMultiplicationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationLeftMultiplicationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationLeftMultiplicationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DurationLeftMultiplicationExpressionContext = DurationLeftMultiplicationExpressionContext;

class UntypedDurationExpressionContext extends DurationExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	lateBoundExpression() {
	    return this.getTypedRuleContext(LateBoundExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterUntypedDurationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitUntypedDurationExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitUntypedDurationExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.UntypedDurationExpressionContext = UntypedDurationExpressionContext;

class SequenceExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_sequenceExpression;
    }

	sequenceFromReference() {
	    return this.getTypedRuleContext(SequenceFromReferenceContext,0);
	};

	stringSequence() {
	    return this.getTypedRuleContext(StringSequenceContext,0);
	};

	booleanSequence() {
	    return this.getTypedRuleContext(BooleanSequenceContext,0);
	};

	numericSequence() {
	    return this.getTypedRuleContext(NumericSequenceContext,0);
	};

	dateSequence() {
	    return this.getTypedRuleContext(DateSequenceContext,0);
	};

	timeSequence() {
	    return this.getTypedRuleContext(TimeSequenceContext,0);
	};

	durationSequence() {
	    return this.getTypedRuleContext(DurationSequenceContext,0);
	};

	sequenceFunction() {
	    return this.getTypedRuleContext(SequenceFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterSequenceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitSequenceExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitSequenceExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_stringSequence;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class StringListContext extends StringSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	stringExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringExpressionContext);
	    } else {
	        return this.getTypedRuleContext(StringExpressionContext,i);
	    }
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EfxParser.Comma);
	    } else {
	        return this.getToken(EfxParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStringList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStringList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStringList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.StringListContext = StringListContext;

class StringsFromIterationContext extends StringSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	stringSequenceFromIteration() {
	    return this.getTypedRuleContext(StringSequenceFromIterationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStringsFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStringsFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStringsFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.StringsFromIterationContext = StringsFromIterationContext;

class StringTypeCastFieldReferenceContext extends StringSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	sequenceFromReference() {
	    return this.getTypedRuleContext(SequenceFromReferenceContext,0);
	};

	TextTypeCast() {
	    return this.getToken(EfxParser.TextTypeCast, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStringTypeCastFieldReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStringTypeCastFieldReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStringTypeCastFieldReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.StringTypeCastFieldReferenceContext = StringTypeCastFieldReferenceContext;

class CodeListContext extends StringSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	codelistReference() {
	    return this.getTypedRuleContext(CodelistReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterCodeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitCodeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitCodeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.CodeListContext = CodeListContext;

class ParenthesizedStringsFromIterationContext extends StringSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	stringSequenceFromIteration() {
	    return this.getTypedRuleContext(StringSequenceFromIterationContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterParenthesizedStringsFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitParenthesizedStringsFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitParenthesizedStringsFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ParenthesizedStringsFromIterationContext = ParenthesizedStringsFromIterationContext;

class StringSequenceFromIterationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_stringSequenceFromIteration;
    }

	For() {
	    return this.getToken(EfxParser.For, 0);
	};

	iteratorList() {
	    return this.getTypedRuleContext(IteratorListContext,0);
	};

	Return() {
	    return this.getToken(EfxParser.Return, 0);
	};

	stringExpression() {
	    return this.getTypedRuleContext(StringExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStringSequenceFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStringSequenceFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStringSequenceFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_booleanSequence;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ParenthesizedBooleansFromIterationContext extends BooleanSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	booleanSequenceFromIteration() {
	    return this.getTypedRuleContext(BooleanSequenceFromIterationContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterParenthesizedBooleansFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitParenthesizedBooleansFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitParenthesizedBooleansFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ParenthesizedBooleansFromIterationContext = ParenthesizedBooleansFromIterationContext;

class BooleanTypeCastFieldReferenceContext extends BooleanSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	sequenceFromReference() {
	    return this.getTypedRuleContext(SequenceFromReferenceContext,0);
	};

	BooleanTypeCast() {
	    return this.getToken(EfxParser.BooleanTypeCast, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterBooleanTypeCastFieldReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitBooleanTypeCastFieldReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitBooleanTypeCastFieldReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.BooleanTypeCastFieldReferenceContext = BooleanTypeCastFieldReferenceContext;

class BooleansFromIterationContext extends BooleanSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	booleanSequenceFromIteration() {
	    return this.getTypedRuleContext(BooleanSequenceFromIterationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterBooleansFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitBooleansFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitBooleansFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.BooleansFromIterationContext = BooleansFromIterationContext;

class BooleanListContext extends BooleanSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	booleanExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BooleanExpressionContext);
	    } else {
	        return this.getTypedRuleContext(BooleanExpressionContext,i);
	    }
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EfxParser.Comma);
	    } else {
	        return this.getToken(EfxParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterBooleanList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitBooleanList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitBooleanList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.BooleanListContext = BooleanListContext;

class BooleanSequenceFromIterationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_booleanSequenceFromIteration;
    }

	For() {
	    return this.getToken(EfxParser.For, 0);
	};

	iteratorList() {
	    return this.getTypedRuleContext(IteratorListContext,0);
	};

	Return() {
	    return this.getToken(EfxParser.Return, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterBooleanSequenceFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitBooleanSequenceFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitBooleanSequenceFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_numericSequence;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class NumericTypeCastFieldReferenceContext extends NumericSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	sequenceFromReference() {
	    return this.getTypedRuleContext(SequenceFromReferenceContext,0);
	};

	NumericTypeCast() {
	    return this.getToken(EfxParser.NumericTypeCast, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNumericTypeCastFieldReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNumericTypeCastFieldReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNumericTypeCastFieldReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.NumericTypeCastFieldReferenceContext = NumericTypeCastFieldReferenceContext;

class NumericListContext extends NumericSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	numericExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NumericExpressionContext,i);
	    }
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EfxParser.Comma);
	    } else {
	        return this.getToken(EfxParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNumericList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNumericList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNumericList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.NumericListContext = NumericListContext;

class ParenthesizedNumbersFromIterationContext extends NumericSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	numericSequenceFromIteration() {
	    return this.getTypedRuleContext(NumericSequenceFromIterationContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterParenthesizedNumbersFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitParenthesizedNumbersFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitParenthesizedNumbersFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ParenthesizedNumbersFromIterationContext = ParenthesizedNumbersFromIterationContext;

class NumbersFromIterationContext extends NumericSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	numericSequenceFromIteration() {
	    return this.getTypedRuleContext(NumericSequenceFromIterationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNumbersFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNumbersFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNumbersFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.NumbersFromIterationContext = NumbersFromIterationContext;

class NumericSequenceFromIterationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_numericSequenceFromIteration;
    }

	For() {
	    return this.getToken(EfxParser.For, 0);
	};

	iteratorList() {
	    return this.getTypedRuleContext(IteratorListContext,0);
	};

	Return() {
	    return this.getToken(EfxParser.Return, 0);
	};

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNumericSequenceFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNumericSequenceFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNumericSequenceFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_dateSequence;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DateTypeCastFieldReferenceContext extends DateSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	sequenceFromReference() {
	    return this.getTypedRuleContext(SequenceFromReferenceContext,0);
	};

	DateTypeCast() {
	    return this.getToken(EfxParser.DateTypeCast, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateTypeCastFieldReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateTypeCastFieldReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateTypeCastFieldReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DateTypeCastFieldReferenceContext = DateTypeCastFieldReferenceContext;

class DatesFromIterationContext extends DateSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	dateSequenceFromIteration() {
	    return this.getTypedRuleContext(DateSequenceFromIterationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDatesFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDatesFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDatesFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DatesFromIterationContext = DatesFromIterationContext;

class DateListContext extends DateSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	dateExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DateExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DateExpressionContext,i);
	    }
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EfxParser.Comma);
	    } else {
	        return this.getToken(EfxParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DateListContext = DateListContext;

class ParenthesizedDatesFromIterationContext extends DateSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	dateSequenceFromIteration() {
	    return this.getTypedRuleContext(DateSequenceFromIterationContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterParenthesizedDatesFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitParenthesizedDatesFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitParenthesizedDatesFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ParenthesizedDatesFromIterationContext = ParenthesizedDatesFromIterationContext;

class DateSequenceFromIterationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_dateSequenceFromIteration;
    }

	For() {
	    return this.getToken(EfxParser.For, 0);
	};

	iteratorList() {
	    return this.getTypedRuleContext(IteratorListContext,0);
	};

	Return() {
	    return this.getToken(EfxParser.Return, 0);
	};

	dateExpression() {
	    return this.getTypedRuleContext(DateExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateSequenceFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateSequenceFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateSequenceFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_timeSequence;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TimeListContext extends TimeSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	timeExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TimeExpressionContext);
	    } else {
	        return this.getTypedRuleContext(TimeExpressionContext,i);
	    }
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EfxParser.Comma);
	    } else {
	        return this.getToken(EfxParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTimeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTimeList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTimeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.TimeListContext = TimeListContext;

class TimesFromIterationContext extends TimeSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	timeSequenceFromIteration() {
	    return this.getTypedRuleContext(TimeSequenceFromIterationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTimesFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTimesFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTimesFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.TimesFromIterationContext = TimesFromIterationContext;

class ParenthesizedTimesFromIterationContext extends TimeSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	timeSequenceFromIteration() {
	    return this.getTypedRuleContext(TimeSequenceFromIterationContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterParenthesizedTimesFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitParenthesizedTimesFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitParenthesizedTimesFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ParenthesizedTimesFromIterationContext = ParenthesizedTimesFromIterationContext;

class TimeTypeCastFieldReferenceContext extends TimeSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	sequenceFromReference() {
	    return this.getTypedRuleContext(SequenceFromReferenceContext,0);
	};

	TimeTypeCast() {
	    return this.getToken(EfxParser.TimeTypeCast, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTimeTypeCastFieldReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTimeTypeCastFieldReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTimeTypeCastFieldReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.TimeTypeCastFieldReferenceContext = TimeTypeCastFieldReferenceContext;

class TimeSequenceFromIterationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_timeSequenceFromIteration;
    }

	For() {
	    return this.getToken(EfxParser.For, 0);
	};

	iteratorList() {
	    return this.getTypedRuleContext(IteratorListContext,0);
	};

	Return() {
	    return this.getToken(EfxParser.Return, 0);
	};

	timeExpression() {
	    return this.getTypedRuleContext(TimeExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTimeSequenceFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTimeSequenceFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTimeSequenceFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_durationSequence;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DurationTypeCastFieldReferenceContext extends DurationSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	sequenceFromReference() {
	    return this.getTypedRuleContext(SequenceFromReferenceContext,0);
	};

	DurationTypeCast() {
	    return this.getToken(EfxParser.DurationTypeCast, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationTypeCastFieldReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationTypeCastFieldReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationTypeCastFieldReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DurationTypeCastFieldReferenceContext = DurationTypeCastFieldReferenceContext;

class ParenthesizedDurationsFromITerationContext extends DurationSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	durationSequenceFromIteration() {
	    return this.getTypedRuleContext(DurationSequenceFromIterationContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterParenthesizedDurationsFromITeration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitParenthesizedDurationsFromITeration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitParenthesizedDurationsFromITeration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ParenthesizedDurationsFromITerationContext = ParenthesizedDurationsFromITerationContext;

class DurationListContext extends DurationSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	durationExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DurationExpressionContext);
	    } else {
	        return this.getTypedRuleContext(DurationExpressionContext,i);
	    }
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EfxParser.Comma);
	    } else {
	        return this.getToken(EfxParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DurationListContext = DurationListContext;

class DurationsFromIterationContext extends DurationSequenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	durationSequenceFromIteration() {
	    return this.getTypedRuleContext(DurationSequenceFromIterationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationsFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationsFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationsFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DurationsFromIterationContext = DurationsFromIterationContext;

class DurationSequenceFromIterationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_durationSequenceFromIteration;
    }

	For() {
	    return this.getToken(EfxParser.For, 0);
	};

	iteratorList() {
	    return this.getTypedRuleContext(IteratorListContext,0);
	};

	Return() {
	    return this.getToken(EfxParser.Return, 0);
	};

	durationExpression() {
	    return this.getTypedRuleContext(DurationExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationSequenceFromIteration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationSequenceFromIteration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationSequenceFromIteration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_predicate;
    }

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IteratorListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_iteratorList;
    }

	iteratorExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IteratorExpressionContext);
	    } else {
	        return this.getTypedRuleContext(IteratorExpressionContext,i);
	    }
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EfxParser.Comma);
	    } else {
	        return this.getToken(EfxParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterIteratorList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitIteratorList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitIteratorList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IteratorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_iteratorExpression;
    }

	stringIteratorExpression() {
	    return this.getTypedRuleContext(StringIteratorExpressionContext,0);
	};

	booleanIteratorExpression() {
	    return this.getTypedRuleContext(BooleanIteratorExpressionContext,0);
	};

	numericIteratorExpression() {
	    return this.getTypedRuleContext(NumericIteratorExpressionContext,0);
	};

	dateIteratorExpression() {
	    return this.getTypedRuleContext(DateIteratorExpressionContext,0);
	};

	timeIteratorExpression() {
	    return this.getTypedRuleContext(TimeIteratorExpressionContext,0);
	};

	durationIteratorExpression() {
	    return this.getTypedRuleContext(DurationIteratorExpressionContext,0);
	};

	contextIteratorExpression() {
	    return this.getTypedRuleContext(ContextIteratorExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterIteratorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitIteratorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitIteratorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringIteratorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_stringIteratorExpression;
    }

	stringVariableDeclaration() {
	    return this.getTypedRuleContext(StringVariableDeclarationContext,0);
	};

	In() {
	    return this.getToken(EfxParser.In, 0);
	};

	stringSequence() {
	    return this.getTypedRuleContext(StringSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStringIteratorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStringIteratorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStringIteratorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanIteratorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_booleanIteratorExpression;
    }

	booleanVariableDeclaration() {
	    return this.getTypedRuleContext(BooleanVariableDeclarationContext,0);
	};

	In() {
	    return this.getToken(EfxParser.In, 0);
	};

	booleanSequence() {
	    return this.getTypedRuleContext(BooleanSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterBooleanIteratorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitBooleanIteratorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitBooleanIteratorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericIteratorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_numericIteratorExpression;
    }

	numericVariableDeclaration() {
	    return this.getTypedRuleContext(NumericVariableDeclarationContext,0);
	};

	In() {
	    return this.getToken(EfxParser.In, 0);
	};

	numericSequence() {
	    return this.getTypedRuleContext(NumericSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNumericIteratorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNumericIteratorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNumericIteratorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateIteratorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_dateIteratorExpression;
    }

	dateVariableDeclaration() {
	    return this.getTypedRuleContext(DateVariableDeclarationContext,0);
	};

	In() {
	    return this.getToken(EfxParser.In, 0);
	};

	dateSequence() {
	    return this.getTypedRuleContext(DateSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateIteratorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateIteratorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateIteratorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeIteratorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_timeIteratorExpression;
    }

	timeVariableDeclaration() {
	    return this.getTypedRuleContext(TimeVariableDeclarationContext,0);
	};

	In() {
	    return this.getToken(EfxParser.In, 0);
	};

	timeSequence() {
	    return this.getTypedRuleContext(TimeSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTimeIteratorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTimeIteratorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTimeIteratorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationIteratorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_durationIteratorExpression;
    }

	durationVariableDeclaration() {
	    return this.getTypedRuleContext(DurationVariableDeclarationContext,0);
	};

	In() {
	    return this.getToken(EfxParser.In, 0);
	};

	durationSequence() {
	    return this.getTypedRuleContext(DurationSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationIteratorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationIteratorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationIteratorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContextIteratorExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_contextIteratorExpression;
    }

	contextVariableDeclaration() {
	    return this.getTypedRuleContext(ContextVariableDeclarationContext,0);
	};

	In() {
	    return this.getToken(EfxParser.In, 0);
	};

	fieldContext() {
	    return this.getTypedRuleContext(FieldContextContext,0);
	};

	nodeContext() {
	    return this.getTypedRuleContext(NodeContextContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterContextIteratorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitContextIteratorExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitContextIteratorExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_stringLiteral;
    }

	STRING() {
	    return this.getToken(EfxParser.STRING, 0);
	};

	UUIDV4() {
	    return this.getToken(EfxParser.UUIDV4, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStringLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_numericLiteral;
    }

	INTEGER() {
	    return this.getToken(EfxParser.INTEGER, 0);
	};

	DECIMAL() {
	    return this.getToken(EfxParser.DECIMAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNumericLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNumericLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_booleanLiteral;
    }

	trueBooleanLiteral() {
	    return this.getTypedRuleContext(TrueBooleanLiteralContext,0);
	};

	falseBooleanLiteral() {
	    return this.getTypedRuleContext(FalseBooleanLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitBooleanLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrueBooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_trueBooleanLiteral;
    }

	Always() {
	    return this.getToken(EfxParser.Always, 0);
	};

	True() {
	    return this.getToken(EfxParser.True, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTrueBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTrueBooleanLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTrueBooleanLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FalseBooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_falseBooleanLiteral;
    }

	Never() {
	    return this.getToken(EfxParser.Never, 0);
	};

	False() {
	    return this.getToken(EfxParser.False, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterFalseBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitFalseBooleanLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitFalseBooleanLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_dateLiteral;
    }

	DATE() {
	    return this.getToken(EfxParser.DATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_timeLiteral;
    }

	TIME() {
	    return this.getToken(EfxParser.TIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTimeLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTimeLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_durationLiteral;
    }

	DayTimeDurationLiteral() {
	    return this.getToken(EfxParser.DayTimeDurationLiteral, 0);
	};

	YearMonthDurationLiteral() {
	    return this.getToken(EfxParser.YearMonthDurationLiteral, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_stringVariableDeclaration;
    }

	TextTypeCast() {
	    return this.getToken(EfxParser.TextTypeCast, 0);
	};

	Variable() {
	    return this.getToken(EfxParser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStringVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStringVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStringVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_booleanVariableDeclaration;
    }

	BooleanTypeCast() {
	    return this.getToken(EfxParser.BooleanTypeCast, 0);
	};

	Variable() {
	    return this.getToken(EfxParser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterBooleanVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitBooleanVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitBooleanVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumericVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_numericVariableDeclaration;
    }

	NumericTypeCast() {
	    return this.getToken(EfxParser.NumericTypeCast, 0);
	};

	Variable() {
	    return this.getToken(EfxParser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNumericVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNumericVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNumericVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_dateVariableDeclaration;
    }

	DateTypeCast() {
	    return this.getToken(EfxParser.DateTypeCast, 0);
	};

	Variable() {
	    return this.getToken(EfxParser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_timeVariableDeclaration;
    }

	TimeTypeCast() {
	    return this.getToken(EfxParser.TimeTypeCast, 0);
	};

	Variable() {
	    return this.getToken(EfxParser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTimeVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTimeVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTimeVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DurationVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_durationVariableDeclaration;
    }

	DurationTypeCast() {
	    return this.getToken(EfxParser.DurationTypeCast, 0);
	};

	Variable() {
	    return this.getToken(EfxParser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDurationVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDurationVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDurationVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContextVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_contextVariableDeclaration;
    }

	ContextTypeCast() {
	    return this.getToken(EfxParser.ContextTypeCast, 0);
	};

	Variable() {
	    return this.getToken(EfxParser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterContextVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitContextVariableDeclaration(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitContextVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_variableReference;
    }

	Variable() {
	    return this.getToken(EfxParser.Variable, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterVariableReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitVariableReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitVariableReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScalarFromReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_scalarFromReference;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ScalarFromAttributeReferenceContext extends ScalarFromReferenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	attributeReference() {
	    return this.getTypedRuleContext(AttributeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterScalarFromAttributeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitScalarFromAttributeReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitScalarFromAttributeReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ScalarFromAttributeReferenceContext = ScalarFromAttributeReferenceContext;

class ScalarFromFieldReferenceContext extends ScalarFromReferenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fieldReference() {
	    return this.getTypedRuleContext(FieldReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterScalarFromFieldReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitScalarFromFieldReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitScalarFromFieldReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ScalarFromFieldReferenceContext = ScalarFromFieldReferenceContext;

class SequenceFromReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_sequenceFromReference;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SequenceFromFieldReferenceContext extends SequenceFromReferenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fieldReference() {
	    return this.getTypedRuleContext(FieldReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterSequenceFromFieldReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitSequenceFromFieldReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitSequenceFromFieldReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.SequenceFromFieldReferenceContext = SequenceFromFieldReferenceContext;

class SequenceFromAttributeReferenceContext extends SequenceFromReferenceContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	attributeReference() {
	    return this.getTypedRuleContext(AttributeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterSequenceFromAttributeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitSequenceFromAttributeReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitSequenceFromAttributeReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.SequenceFromAttributeReferenceContext = SequenceFromAttributeReferenceContext;

class PathFromReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_pathFromReference;
    }

	fieldReference() {
	    return this.getTypedRuleContext(FieldReferenceContext,0);
	};

	attributeReference() {
	    return this.getTypedRuleContext(AttributeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterPathFromReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitPathFromReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitPathFromReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContextFieldSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_contextFieldSpecifier;
        this.field = null;
    }

	ColonColon() {
	    return this.getToken(EfxParser.ColonColon, 0);
	};

	fieldContext() {
	    return this.getTypedRuleContext(FieldContextContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterContextFieldSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitContextFieldSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitContextFieldSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContextNodeSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_contextNodeSpecifier;
        this.node = null;
    }

	ColonColon() {
	    return this.getToken(EfxParser.ColonColon, 0);
	};

	nodeContext() {
	    return this.getTypedRuleContext(NodeContextContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterContextNodeSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitContextNodeSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitContextNodeSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContextVariableSpecifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_contextVariableSpecifier;
        this.variable = null;
    }

	ColonColon() {
	    return this.getToken(EfxParser.ColonColon, 0);
	};

	variableReference() {
	    return this.getTypedRuleContext(VariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterContextVariableSpecifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitContextVariableSpecifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitContextVariableSpecifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttributeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_attributeReference;
    }

	fieldReference() {
	    return this.getTypedRuleContext(FieldReferenceContext,0);
	};

	SlashAt() {
	    return this.getToken(EfxParser.SlashAt, 0);
	};

	Identifier() {
	    return this.getToken(EfxParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterAttributeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitAttributeReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitAttributeReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_fieldReference;
    }

	fieldReferenceWithFieldContextOverride() {
	    return this.getTypedRuleContext(FieldReferenceWithFieldContextOverrideContext,0);
	};

	fieldReferenceInOtherNotice() {
	    return this.getTypedRuleContext(FieldReferenceInOtherNoticeContext,0);
	};

	absoluteFieldReference() {
	    return this.getTypedRuleContext(AbsoluteFieldReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterFieldReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitFieldReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitFieldReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldReferenceInOtherNoticeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_fieldReferenceInOtherNotice;
        this.reference = null;
    }

	fieldReferenceWithVariableContextOverride() {
	    return this.getTypedRuleContext(FieldReferenceWithVariableContextOverrideContext,0);
	};

	noticeReference() {
	    return this.getTypedRuleContext(NoticeReferenceContext,0);
	};

	Slash() {
	    return this.getToken(EfxParser.Slash, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterFieldReferenceInOtherNotice(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitFieldReferenceInOtherNotice(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitFieldReferenceInOtherNotice(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldReferenceWithVariableContextOverrideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_fieldReferenceWithVariableContextOverride;
        this.reference = null;
    }

	fieldReferenceWithNodeContextOverride() {
	    return this.getTypedRuleContext(FieldReferenceWithNodeContextOverrideContext,0);
	};

	contextVariableSpecifier() {
	    return this.getTypedRuleContext(ContextVariableSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterFieldReferenceWithVariableContextOverride(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitFieldReferenceWithVariableContextOverride(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitFieldReferenceWithVariableContextOverride(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldReferenceWithNodeContextOverrideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_fieldReferenceWithNodeContextOverride;
        this.reference = null;
    }

	fieldReferenceWithFieldContextOverride() {
	    return this.getTypedRuleContext(FieldReferenceWithFieldContextOverrideContext,0);
	};

	contextNodeSpecifier() {
	    return this.getTypedRuleContext(ContextNodeSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterFieldReferenceWithNodeContextOverride(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitFieldReferenceWithNodeContextOverride(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitFieldReferenceWithNodeContextOverride(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldReferenceWithFieldContextOverrideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_fieldReferenceWithFieldContextOverride;
        this.reference = null;
    }

	fieldReferenceWithPredicate() {
	    return this.getTypedRuleContext(FieldReferenceWithPredicateContext,0);
	};

	contextFieldSpecifier() {
	    return this.getTypedRuleContext(ContextFieldSpecifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterFieldReferenceWithFieldContextOverride(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitFieldReferenceWithFieldContextOverride(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitFieldReferenceWithFieldContextOverride(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldContextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_fieldContext;
    }

	absoluteFieldReference() {
	    return this.getTypedRuleContext(AbsoluteFieldReferenceContext,0);
	};

	fieldReferenceWithPredicate() {
	    return this.getTypedRuleContext(FieldReferenceWithPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterFieldContext(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitFieldContext(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitFieldContext(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbsoluteFieldReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_absoluteFieldReference;
        this.reference = null;
    }

	Slash() {
	    return this.getToken(EfxParser.Slash, 0);
	};

	fieldReferenceWithPredicate() {
	    return this.getTypedRuleContext(FieldReferenceWithPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterAbsoluteFieldReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitAbsoluteFieldReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitAbsoluteFieldReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldReferenceWithPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_fieldReferenceWithPredicate;
        this.reference = null;
    }

	fieldReferenceWithAxis() {
	    return this.getTypedRuleContext(FieldReferenceWithAxisContext,0);
	};

	OpenBracket() {
	    return this.getToken(EfxParser.OpenBracket, 0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	CloseBracket() {
	    return this.getToken(EfxParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterFieldReferenceWithPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitFieldReferenceWithPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitFieldReferenceWithPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldReferenceWithAxisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_fieldReferenceWithAxis;
    }

	simpleFieldReference() {
	    return this.getTypedRuleContext(SimpleFieldReferenceContext,0);
	};

	axis() {
	    return this.getTypedRuleContext(AxisContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterFieldReferenceWithAxis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitFieldReferenceWithAxis(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitFieldReferenceWithAxis(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleFieldReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_simpleFieldReference;
    }

	FieldId() {
	    return this.getToken(EfxParser.FieldId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterSimpleFieldReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitSimpleFieldReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitSimpleFieldReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_nodeReference;
    }

	absoluteNodeReference() {
	    return this.getTypedRuleContext(AbsoluteNodeReferenceContext,0);
	};

	nodeReferenceInOtherNotice() {
	    return this.getTypedRuleContext(NodeReferenceInOtherNoticeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNodeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNodeReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNodeReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeReferenceInOtherNoticeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_nodeReferenceInOtherNotice;
    }

	noticeReference() {
	    return this.getTypedRuleContext(NoticeReferenceContext,0);
	};

	Slash() {
	    return this.getToken(EfxParser.Slash, 0);
	};

	nodeReferenceWithPredicate() {
	    return this.getTypedRuleContext(NodeReferenceWithPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNodeReferenceInOtherNotice(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNodeReferenceInOtherNotice(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNodeReferenceInOtherNotice(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeContextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_nodeContext;
    }

	absoluteNodeReference() {
	    return this.getTypedRuleContext(AbsoluteNodeReferenceContext,0);
	};

	nodeReferenceWithPredicate() {
	    return this.getTypedRuleContext(NodeReferenceWithPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNodeContext(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNodeContext(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNodeContext(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AbsoluteNodeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_absoluteNodeReference;
    }

	Slash() {
	    return this.getToken(EfxParser.Slash, 0);
	};

	nodeReferenceWithPredicate() {
	    return this.getTypedRuleContext(NodeReferenceWithPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterAbsoluteNodeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitAbsoluteNodeReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitAbsoluteNodeReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NodeReferenceWithPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_nodeReferenceWithPredicate;
    }

	simpleNodeReference() {
	    return this.getTypedRuleContext(SimpleNodeReferenceContext,0);
	};

	OpenBracket() {
	    return this.getToken(EfxParser.OpenBracket, 0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	CloseBracket() {
	    return this.getToken(EfxParser.CloseBracket, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNodeReferenceWithPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNodeReferenceWithPredicate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNodeReferenceWithPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleNodeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_simpleNodeReference;
    }

	NodeId() {
	    return this.getToken(EfxParser.NodeId, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterSimpleNodeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitSimpleNodeReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitSimpleNodeReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoticeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_noticeReference;
        this.noticeId = null;
    }

	Notice() {
	    return this.getToken(EfxParser.Notice, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	stringExpression() {
	    return this.getTypedRuleContext(StringExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNoticeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNoticeReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNoticeReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CodelistReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_codelistReference;
        this.codeListId = null;
    }

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	codelistId() {
	    return this.getTypedRuleContext(CodelistIdContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterCodelistReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitCodelistReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitCodelistReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CodelistIdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_codelistId;
    }

	Identifier() {
	    return this.getToken(EfxParser.Identifier, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterCodelistId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitCodelistId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitCodelistId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AxisContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_axis;
    }

	Axis() {
	    return this.getToken(EfxParser.Axis, 0);
	};

	ColonColon() {
	    return this.getToken(EfxParser.ColonColon, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterAxis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitAxis(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitAxis(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BooleanFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_booleanFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SequenceEqualFunctionContext extends BooleanFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.left = null;;
        this.right = null;;
        super.copyFrom(ctx);
    }

	SequenceEqualFunction() {
	    return this.getToken(EfxParser.SequenceEqualFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	Comma() {
	    return this.getToken(EfxParser.Comma, 0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	sequenceExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SequenceExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SequenceExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterSequenceEqualFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitSequenceEqualFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitSequenceEqualFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.SequenceEqualFunctionContext = SequenceEqualFunctionContext;

class NotFunctionContext extends BooleanFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	Not() {
	    return this.getToken(EfxParser.Not, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	booleanExpression() {
	    return this.getTypedRuleContext(BooleanExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNotFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNotFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNotFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.NotFunctionContext = NotFunctionContext;

class EndsWithFunctionContext extends BooleanFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.haystack = null;;
        this.needle = null;;
        super.copyFrom(ctx);
    }

	EndsWithFunction() {
	    return this.getToken(EfxParser.EndsWithFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	Comma() {
	    return this.getToken(EfxParser.Comma, 0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	stringExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringExpressionContext);
	    } else {
	        return this.getTypedRuleContext(StringExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterEndsWithFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitEndsWithFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitEndsWithFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.EndsWithFunctionContext = EndsWithFunctionContext;

class ContainsFunctionContext extends BooleanFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.haystack = null;;
        this.needle = null;;
        super.copyFrom(ctx);
    }

	ContainsFunction() {
	    return this.getToken(EfxParser.ContainsFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	Comma() {
	    return this.getToken(EfxParser.Comma, 0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	stringExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringExpressionContext);
	    } else {
	        return this.getTypedRuleContext(StringExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterContainsFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitContainsFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitContainsFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ContainsFunctionContext = ContainsFunctionContext;

class StartsWithFunctionContext extends BooleanFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.haystack = null;;
        this.needle = null;;
        super.copyFrom(ctx);
    }

	StartsWithFunction() {
	    return this.getToken(EfxParser.StartsWithFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	Comma() {
	    return this.getToken(EfxParser.Comma, 0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	stringExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringExpressionContext);
	    } else {
	        return this.getTypedRuleContext(StringExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStartsWithFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStartsWithFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStartsWithFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.StartsWithFunctionContext = StartsWithFunctionContext;

class NumericFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_numericFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CountFunctionContext extends NumericFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CountFunction() {
	    return this.getToken(EfxParser.CountFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	sequenceExpression() {
	    return this.getTypedRuleContext(SequenceExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterCountFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitCountFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitCountFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.CountFunctionContext = CountFunctionContext;

class SumFunctionContext extends NumericFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SumFunction() {
	    return this.getToken(EfxParser.SumFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	numericSequence() {
	    return this.getTypedRuleContext(NumericSequenceContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterSumFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitSumFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitSumFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.SumFunctionContext = SumFunctionContext;

class NumberFunctionContext extends NumericFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NumberFunction() {
	    return this.getToken(EfxParser.NumberFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	stringExpression() {
	    return this.getTypedRuleContext(StringExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterNumberFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitNumberFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitNumberFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.NumberFunctionContext = NumberFunctionContext;

class StringLengthFunctionContext extends NumericFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	StringLengthFunction() {
	    return this.getToken(EfxParser.StringLengthFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	stringExpression() {
	    return this.getTypedRuleContext(StringExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterStringLengthFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitStringLengthFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitStringLengthFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.StringLengthFunctionContext = StringLengthFunctionContext;

class StringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_stringFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class FormatNumberFunctionContext extends StringFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.format = null;;
        super.copyFrom(ctx);
    }

	FormatNumberFunction() {
	    return this.getToken(EfxParser.FormatNumberFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	Comma() {
	    return this.getToken(EfxParser.Comma, 0);
	};

	stringExpression() {
	    return this.getTypedRuleContext(StringExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterFormatNumberFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitFormatNumberFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitFormatNumberFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.FormatNumberFunctionContext = FormatNumberFunctionContext;

class ConcatFunctionContext extends StringFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ConcatFunction() {
	    return this.getToken(EfxParser.ConcatFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	stringExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StringExpressionContext);
	    } else {
	        return this.getTypedRuleContext(StringExpressionContext,i);
	    }
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EfxParser.Comma);
	    } else {
	        return this.getToken(EfxParser.Comma, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterConcatFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitConcatFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitConcatFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ConcatFunctionContext = ConcatFunctionContext;

class ToStringFunctionContext extends StringFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	StringFunction() {
	    return this.getToken(EfxParser.StringFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	numericExpression() {
	    return this.getTypedRuleContext(NumericExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterToStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitToStringFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitToStringFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ToStringFunctionContext = ToStringFunctionContext;

class SubstringFunctionContext extends StringFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.start = null;;
        this.length = null;;
        super.copyFrom(ctx);
    }

	SubstringFunction() {
	    return this.getToken(EfxParser.SubstringFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	stringExpression() {
	    return this.getTypedRuleContext(StringExpressionContext,0);
	};

	Comma = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(EfxParser.Comma);
	    } else {
	        return this.getToken(EfxParser.Comma, i);
	    }
	};


	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	numericExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumericExpressionContext);
	    } else {
	        return this.getTypedRuleContext(NumericExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterSubstringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitSubstringFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitSubstringFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.SubstringFunctionContext = SubstringFunctionContext;

class DateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_dateFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DateMinusMeasureFunctionContext extends DateFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SubtractMeasure() {
	    return this.getToken(EfxParser.SubtractMeasure, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	dateExpression() {
	    return this.getTypedRuleContext(DateExpressionContext,0);
	};

	Comma() {
	    return this.getToken(EfxParser.Comma, 0);
	};

	durationExpression() {
	    return this.getTypedRuleContext(DurationExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateMinusMeasureFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateMinusMeasureFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateMinusMeasureFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DateMinusMeasureFunctionContext = DateMinusMeasureFunctionContext;

class DatePlusMeasureFunctionContext extends DateFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AddMeasure() {
	    return this.getToken(EfxParser.AddMeasure, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	dateExpression() {
	    return this.getTypedRuleContext(DateExpressionContext,0);
	};

	Comma() {
	    return this.getToken(EfxParser.Comma, 0);
	};

	durationExpression() {
	    return this.getTypedRuleContext(DurationExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDatePlusMeasureFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDatePlusMeasureFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDatePlusMeasureFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DatePlusMeasureFunctionContext = DatePlusMeasureFunctionContext;

class DateFromStringFunctionContext extends DateFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DateFunction() {
	    return this.getToken(EfxParser.DateFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	stringExpression() {
	    return this.getTypedRuleContext(StringExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDateFromStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDateFromStringFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDateFromStringFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DateFromStringFunctionContext = DateFromStringFunctionContext;

class TimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_timeFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TimeFromStringFunctionContext extends TimeFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TimeFunction() {
	    return this.getToken(EfxParser.TimeFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	stringExpression() {
	    return this.getTypedRuleContext(StringExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterTimeFromStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitTimeFromStringFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitTimeFromStringFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.TimeFromStringFunctionContext = TimeFromStringFunctionContext;

class DurationFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_durationFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DayTimeDurationFromStringFunctionContext extends DurationFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DayTimeDurationFunction() {
	    return this.getToken(EfxParser.DayTimeDurationFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	stringExpression() {
	    return this.getTypedRuleContext(StringExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDayTimeDurationFromStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDayTimeDurationFromStringFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDayTimeDurationFromStringFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DayTimeDurationFromStringFunctionContext = DayTimeDurationFromStringFunctionContext;

class YearMonthDurationFromStringFunctionContext extends DurationFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	YearMonthDurationFunction() {
	    return this.getToken(EfxParser.YearMonthDurationFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	stringExpression() {
	    return this.getTypedRuleContext(StringExpressionContext,0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterYearMonthDurationFromStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitYearMonthDurationFromStringFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitYearMonthDurationFromStringFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.YearMonthDurationFromStringFunctionContext = YearMonthDurationFromStringFunctionContext;

class SequenceFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = EfxParser.RULE_sequenceFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExceptFunctionContext extends SequenceFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ExceptFunction() {
	    return this.getToken(EfxParser.ExceptFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	Comma() {
	    return this.getToken(EfxParser.Comma, 0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	sequenceExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SequenceExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SequenceExpressionContext,i);
	    }
	};

	variableReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableReferenceContext);
	    } else {
	        return this.getTypedRuleContext(VariableReferenceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterExceptFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitExceptFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitExceptFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.ExceptFunctionContext = ExceptFunctionContext;

class UnionFunctionContext extends SequenceFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UnionFunction() {
	    return this.getToken(EfxParser.UnionFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	Comma() {
	    return this.getToken(EfxParser.Comma, 0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	sequenceExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SequenceExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SequenceExpressionContext,i);
	    }
	};

	variableReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableReferenceContext);
	    } else {
	        return this.getTypedRuleContext(VariableReferenceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterUnionFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitUnionFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitUnionFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.UnionFunctionContext = UnionFunctionContext;

class IntersectFunctionContext extends SequenceFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IntersectFunction() {
	    return this.getToken(EfxParser.IntersectFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	Comma() {
	    return this.getToken(EfxParser.Comma, 0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	sequenceExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SequenceExpressionContext);
	    } else {
	        return this.getTypedRuleContext(SequenceExpressionContext,i);
	    }
	};

	variableReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VariableReferenceContext);
	    } else {
	        return this.getTypedRuleContext(VariableReferenceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterIntersectFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitIntersectFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitIntersectFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.IntersectFunctionContext = IntersectFunctionContext;

class DistinctValuesFunctionContext extends SequenceFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DistinctValuesFunction() {
	    return this.getToken(EfxParser.DistinctValuesFunction, 0);
	};

	OpenParenthesis() {
	    return this.getToken(EfxParser.OpenParenthesis, 0);
	};

	CloseParenthesis() {
	    return this.getToken(EfxParser.CloseParenthesis, 0);
	};

	sequenceExpression() {
	    return this.getTypedRuleContext(SequenceExpressionContext,0);
	};

	variableReference() {
	    return this.getTypedRuleContext(VariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.enterDistinctValuesFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof EfxListener ) {
	        listener.exitDistinctValuesFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof EfxVisitor ) {
	        return visitor.visitDistinctValuesFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

EfxParser.DistinctValuesFunctionContext = DistinctValuesFunctionContext;


EfxParser.SingleExpressionContext = SingleExpressionContext; 
EfxParser.TemplateFileContext = TemplateFileContext; 
EfxParser.TemplateLineContext = TemplateLineContext; 
EfxParser.TemplateContext = TemplateContext; 
EfxParser.TemplateFragmentContext = TemplateFragmentContext; 
EfxParser.TextBlockContext = TextBlockContext; 
EfxParser.WhitespaceContext = WhitespaceContext; 
EfxParser.LabelBlockContext = LabelBlockContext; 
EfxParser.AssetTypeContext = AssetTypeContext; 
EfxParser.LabelTypeContext = LabelTypeContext; 
EfxParser.AssetIdContext = AssetIdContext; 
EfxParser.OtherAssetIdContext = OtherAssetIdContext; 
EfxParser.ExpressionBlockContext = ExpressionBlockContext; 
EfxParser.ContextDeclarationBlockContext = ContextDeclarationBlockContext; 
EfxParser.ParameterListContext = ParameterListContext; 
EfxParser.ParameterDeclarationContext = ParameterDeclarationContext; 
EfxParser.ParameterValueContext = ParameterValueContext; 
EfxParser.ExpressionContext = ExpressionContext; 
EfxParser.LateBoundExpressionContext = LateBoundExpressionContext; 
EfxParser.BooleanExpressionContext = BooleanExpressionContext; 
EfxParser.StringExpressionContext = StringExpressionContext; 
EfxParser.NumericExpressionContext = NumericExpressionContext; 
EfxParser.DateExpressionContext = DateExpressionContext; 
EfxParser.TimeExpressionContext = TimeExpressionContext; 
EfxParser.DurationExpressionContext = DurationExpressionContext; 
EfxParser.SequenceExpressionContext = SequenceExpressionContext; 
EfxParser.StringSequenceContext = StringSequenceContext; 
EfxParser.StringSequenceFromIterationContext = StringSequenceFromIterationContext; 
EfxParser.BooleanSequenceContext = BooleanSequenceContext; 
EfxParser.BooleanSequenceFromIterationContext = BooleanSequenceFromIterationContext; 
EfxParser.NumericSequenceContext = NumericSequenceContext; 
EfxParser.NumericSequenceFromIterationContext = NumericSequenceFromIterationContext; 
EfxParser.DateSequenceContext = DateSequenceContext; 
EfxParser.DateSequenceFromIterationContext = DateSequenceFromIterationContext; 
EfxParser.TimeSequenceContext = TimeSequenceContext; 
EfxParser.TimeSequenceFromIterationContext = TimeSequenceFromIterationContext; 
EfxParser.DurationSequenceContext = DurationSequenceContext; 
EfxParser.DurationSequenceFromIterationContext = DurationSequenceFromIterationContext; 
EfxParser.PredicateContext = PredicateContext; 
EfxParser.IteratorListContext = IteratorListContext; 
EfxParser.IteratorExpressionContext = IteratorExpressionContext; 
EfxParser.StringIteratorExpressionContext = StringIteratorExpressionContext; 
EfxParser.BooleanIteratorExpressionContext = BooleanIteratorExpressionContext; 
EfxParser.NumericIteratorExpressionContext = NumericIteratorExpressionContext; 
EfxParser.DateIteratorExpressionContext = DateIteratorExpressionContext; 
EfxParser.TimeIteratorExpressionContext = TimeIteratorExpressionContext; 
EfxParser.DurationIteratorExpressionContext = DurationIteratorExpressionContext; 
EfxParser.ContextIteratorExpressionContext = ContextIteratorExpressionContext; 
EfxParser.StringLiteralContext = StringLiteralContext; 
EfxParser.NumericLiteralContext = NumericLiteralContext; 
EfxParser.BooleanLiteralContext = BooleanLiteralContext; 
EfxParser.TrueBooleanLiteralContext = TrueBooleanLiteralContext; 
EfxParser.FalseBooleanLiteralContext = FalseBooleanLiteralContext; 
EfxParser.DateLiteralContext = DateLiteralContext; 
EfxParser.TimeLiteralContext = TimeLiteralContext; 
EfxParser.DurationLiteralContext = DurationLiteralContext; 
EfxParser.StringVariableDeclarationContext = StringVariableDeclarationContext; 
EfxParser.BooleanVariableDeclarationContext = BooleanVariableDeclarationContext; 
EfxParser.NumericVariableDeclarationContext = NumericVariableDeclarationContext; 
EfxParser.DateVariableDeclarationContext = DateVariableDeclarationContext; 
EfxParser.TimeVariableDeclarationContext = TimeVariableDeclarationContext; 
EfxParser.DurationVariableDeclarationContext = DurationVariableDeclarationContext; 
EfxParser.ContextVariableDeclarationContext = ContextVariableDeclarationContext; 
EfxParser.VariableReferenceContext = VariableReferenceContext; 
EfxParser.ScalarFromReferenceContext = ScalarFromReferenceContext; 
EfxParser.SequenceFromReferenceContext = SequenceFromReferenceContext; 
EfxParser.PathFromReferenceContext = PathFromReferenceContext; 
EfxParser.ContextFieldSpecifierContext = ContextFieldSpecifierContext; 
EfxParser.ContextNodeSpecifierContext = ContextNodeSpecifierContext; 
EfxParser.ContextVariableSpecifierContext = ContextVariableSpecifierContext; 
EfxParser.AttributeReferenceContext = AttributeReferenceContext; 
EfxParser.FieldReferenceContext = FieldReferenceContext; 
EfxParser.FieldReferenceInOtherNoticeContext = FieldReferenceInOtherNoticeContext; 
EfxParser.FieldReferenceWithVariableContextOverrideContext = FieldReferenceWithVariableContextOverrideContext; 
EfxParser.FieldReferenceWithNodeContextOverrideContext = FieldReferenceWithNodeContextOverrideContext; 
EfxParser.FieldReferenceWithFieldContextOverrideContext = FieldReferenceWithFieldContextOverrideContext; 
EfxParser.FieldContextContext = FieldContextContext; 
EfxParser.AbsoluteFieldReferenceContext = AbsoluteFieldReferenceContext; 
EfxParser.FieldReferenceWithPredicateContext = FieldReferenceWithPredicateContext; 
EfxParser.FieldReferenceWithAxisContext = FieldReferenceWithAxisContext; 
EfxParser.SimpleFieldReferenceContext = SimpleFieldReferenceContext; 
EfxParser.NodeReferenceContext = NodeReferenceContext; 
EfxParser.NodeReferenceInOtherNoticeContext = NodeReferenceInOtherNoticeContext; 
EfxParser.NodeContextContext = NodeContextContext; 
EfxParser.AbsoluteNodeReferenceContext = AbsoluteNodeReferenceContext; 
EfxParser.NodeReferenceWithPredicateContext = NodeReferenceWithPredicateContext; 
EfxParser.SimpleNodeReferenceContext = SimpleNodeReferenceContext; 
EfxParser.NoticeReferenceContext = NoticeReferenceContext; 
EfxParser.CodelistReferenceContext = CodelistReferenceContext; 
EfxParser.CodelistIdContext = CodelistIdContext; 
EfxParser.AxisContext = AxisContext; 
EfxParser.BooleanFunctionContext = BooleanFunctionContext; 
EfxParser.NumericFunctionContext = NumericFunctionContext; 
EfxParser.StringFunctionContext = StringFunctionContext; 
EfxParser.DateFunctionContext = DateFunctionContext; 
EfxParser.TimeFunctionContext = TimeFunctionContext; 
EfxParser.DurationFunctionContext = DurationFunctionContext; 
EfxParser.SequenceFunctionContext = SequenceFunctionContext; 
